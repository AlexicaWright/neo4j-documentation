[[administration-indexes]]
= Indexes

[abstract]
--
This section explains how to manage indexes used for search performance as well as for full-text search.
--

* <<administration-indexes-introduction, Managing indexes for search performance>>
** <<administration-indexes-naming, Named indexes>>
** <<administration-indexes-single-vs-composite-index, Composite index limitations>>
** <<administration-indexes-create-a-single-property-index, Create a single-property index>>
** <<administration-indexes-create-a-named-single-property-index, Create a named single-property index>>
** <<administration-indexes-create-a-composite-index, Create a composite index>>
** <<administration-indexes-create-a-named-composite-index, Create a named composite index>>
** <<administration-indexes-get-a-list-of-all-indexes-in-the-database, Get a list of all indexes in the database>>
** <<administration-indexes-drop-a-single-property-index, Drop a single-property index>>
** <<administration-indexes-drop-a-composite-index, Drop a composite index>>
** <<administration-indexes-drop-an-index-by-name, Drop an index by name>>
* <<administration-indexes-fulltext-search, Managing indexes for full-text search>>
** <<administration-indexes-fulltext-search-introduction, Introduction>>
** <<administration-indexes-fulltext-search-manage, Procedures to manage full-text indexes>>
** <<administration-indexes-fulltext-search-create-and-configure, Create and configure full-text indexes>>
** <<administration-indexes-fulltext-search-query, Query full-text indexes>>
** <<administration-indexes-fulltext-search-drop, Drop full-text indexes>>

[NOTE]
This section describes how to manage indexes.
For query performance purposes, it is important to also understand how the indexes are used by the Cypher planner.
Refer to <<query-tuning>> for examples and in-depth discussions on how 
See also <<query-tuning-indexes>> for an extended discussion on the query plans result from different index scenarios.


[[administration-indexes-introduction]]
== Managing Indexes

A database index is a redundant copy of some of the data in the database for the purpose of making searches of related data more efficient.
This comes at the cost of additional storage space and slower writes, so deciding what to index and what not to index is an important and often non-trivial task.

Cypher enables the creation of indexes on one or more properties for all nodes that have a given label:

* An index that is created on a single property for any given label is called a _single-property index_.
* An index that is created on more than one property for any given label is called a _composite index_.
  Differences in the usage patterns between composite and single-property indexes are described in
  <<administration-indexes-single-vs-composite-index, composite index limitations>> and shown in the examples below.

Once an index has been created, it will automatically be managed and kept up to date by the database when the graph is changed.
Neo4j will automatically pick up and start using the index once it has been created and brought online.

<<query-using>> describes how to make the Cypher planner use specific indexes (especially in cases where the planner would not necessarily have used them).


.Index configuration and limitations
For information on index configuration and limitations, refer to <<operations-manual#index-configuration, Operations Manual -> Index configuration>>.


[NOTE]
Index creation is not idempotent, but throws when creating the same index twice.

[[administration-indexes-naming]]
=== Named indexes

When created, an index may be given a name. The name needs to be unique among both indexes and constraints.
If no name is given during creation, a unique name will be generated for the index.
The unique name is used also when dropping an index.

[[administration-indexes-single-vs-composite-index]]
=== Composite index limitations

Like single-property indexes, composite indexes support all predicates:

* equality check: `n.prop = value`
* list membership check: `n.prop IN list`
* existence check: `exists(n.prop)`
* range search: `n.prop > value`
* prefix search: `STARTS WITH`
* suffix search: `ENDS WITH`
* substring search: `CONTAINS`

However, predicates might be planned as existence check and a filter.
For most predicates, this can be avoided by following these restrictions:

* If there is any `equality check` and `list membership check` predicates,
they need to be for the first properties defined by the index.
* There can be up to one `range search` or `prefix search` predicate.
* There can be any number of `existence check` predicates.
* Any predicate after a `range search`, `prefix search` or `existence check` predicate has to be an `existence check` predicate.

However, the `suffix search` and `substring search` predicates are always planned as existence check and a filter and
any predicates following after will therefore also be planned as such.

For example, an index on `:Label(prop1,prop2,prop3,prop4,prop5,prop6)` and predicates:

```
WHERE n.prop1 = 'x' AND n.prop2 = 1 AND n.prop3 > 5 AND n.prop4 < 'e' AND n.prop5 = true AND exists(n.prop6)
```

will be planned as:

```
WHERE n.prop1 = 'x' AND n.prop2 = 1 AND n.prop3 > 5 AND exists(n.prop4) AND exists(n.prop5) AND exists(n.prop6)
```

with filters on `n.prop4 < 'e'` and `n.prop5 = true`, since `n.prop3` has a `range search` predicate.

And an index on `:Label(prop1,prop2)` with predicates:

```
WHERE n.prop1 ENDS WITH 'x' AND n.prop2 = false
```

will be planned as:

```
WHERE exists(n.prop1) AND exists(n.prop2)
```

with filters on `n.prop1 ENDS WITH 'x'` and `n.prop2 = false`, since `n.prop1` has a `suffix search` predicate.

Composite indexes require predicates on all properties indexed.
If there are predicates on only a subset of the indexed properties, it will not be possible to use the composite index.
To get this kind of fallback behavior, it is necessary to create additional indexes on the relevant sub-set of properties or on single properties.


include::create-a-single-property-index.asciidoc[leveloffset=+1]

include::create-a-named-single-property-index.asciidoc[leveloffset=+1]

include::create-a-composite-index.asciidoc[leveloffset=+1]

include::create-a-named-composite-index.asciidoc[leveloffset=+1]

include::get-a-list-of-all-indexes-in-the-database.asciidoc[leveloffset=+1]

[role=deprecated]
include::drop-a-single-property-index.asciidoc[leveloffset=+1]

[role=deprecated]
include::drop-a-composite-index.asciidoc[leveloffset=+1]

include::drop-an-index-by-name.asciidoc[leveloffset=+1]

include::administration-indexes-fulltext-search.adoc[leveloffset=+1]
