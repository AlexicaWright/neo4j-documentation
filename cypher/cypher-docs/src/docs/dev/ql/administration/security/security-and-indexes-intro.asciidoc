As described in <<administration-indexes-search-performance, Indexes for search performance>>, Neo4j {neo4j-version} supports the creation and use of indexes to improve the performance of Cypher queries.
The Neo4j security model will impact the results of queries that use the index.
When using normal Neo4j indexes, a Cypher query will always return the same results it would have if no index existed.
This means that if the security model causes fewer results to be returned due to restricted read access in <<administration-security-subgraph, Graph and sub-graph access control>>,
the index will also return the same fewer results.

However, this rule is not fully obeyed by <<administration-indexes-fulltext-search, Indexes for full-text search>>.
These specific indexes are backed by Lucene internally.
It is therefore not possible to know for certain whether a security violation occurred for each specific entry returned from the index.
As a result, Neo4j will return zero results from Full-text indexes if it is determined that any result might violate the security privileges active for that query.

Since full-text indexes are not automatically used by Cypher, this does not lead to the case where the same Cypher query would return different results simply because such an index got created.
Users need to explicitly call procedures to use these indexes.
The problem is only that if this behavior is not understood by the user, they might expect the full text index to return results that a different, but semantically similar, Cypher query does.

==== Example with denylisted properties

Consider the following example.
The database has nodes with Label `:User` and these have properties `name` and `email`.
We have a normal index on both properties:

    CREATE INDEX FOR (n:User) FOR (n.name, n.surname);
    CALL db.index.fulltext.createNodeIndex("userNames",["User", "Person"],["name", "surname"]);

[NOTE]
Full-text indexes also support multiple labels.
See <<administration-indexes-fulltext-search, Indexes for full-text search>> for more details on creating and using full-text indexes.

After creating these indexes, it would appear we have two indexes accomplishing the same thing.
However, this is not completely accurate.
These two indexes behave in different ways and are focused on different use cases.
A key difference is that full-text indexes are backed by Lucene, and will use the Lucene syntax for querying the index.

This has consequences for users restricted on the labels or properties involved in the indexes.
Ideally, if the labels and properties in the index are denylisted, we can correctly return zero results from both native indexes and full-text indexes.
However, there are borderline cases where this is not as simple.

Imagine the following nodes were added to the database:

    CREATE (:User {name:'Mark', surname:'Andy'});
    CREATE (:User {name:'Andy', surname:'Anderson'});
    CREATE (:User:Person {name:'Mandy', surname:'Smith'});
    CREATE (:User:Person {name:'Joe', surname:'Andy'});

Consider denylisting on the label `:Person`.

    DENY TRAVERSE Person ON GRAPH * TO users;

If the user runs a query that will use the native index:

    MATCH (n:User) WHERE n.name CONTAINS 'ndy' RETURN n.name;

This query will perform several checks:

* do a scan on the index to create a stream of results of nodes with the `name` property, which leads to four results
* filter the results to include only nodes where `n.name CONTAINS 'ndy'`, filtering out `Mark` and `Joe` so we have two results
* filter the results to exclude nodes that also have the label `:Person`, filtering out `Mandy` so we only have one result

For the above dataset, we can see we will get one result.

What if we query this with the full-text index:

    CALL db.index.fulltext.queryNodes("userNames", "ndy") YIELD node, score
    RETURN node.name

The problem now is that we do not know if the results provided by the index were because of a match to the `name` or the `surname` property.
The steps taken by the query engine would be:

* run a _Lucene_ query on the full-text index to produce results containing `ndy` in either property, leading to four results.
* filter the results to exclude nodes that also have the label `:Person`, filtering out `Mandy` and `Joe` so we have two results.

This difference in results is due to the `OR` relationship between the two properties in the index creation.

==== Blacklisting properties

Now consider denylisting/denying access on properties, like the `surname` property:

    DENY READ {surname} ON GRAPH * TO users;

Now we run the same queries again:

    MATCH (n:User) WHERE n.name CONTAINS 'ndy' RETURN n.name;

This query will operate exactly as before, returning the same single result, because nothing in this query relates to the denylisted property.

But consider the full-text index query:

    CALL db.index.fulltext.queryNodes("userNames", "ndy") YIELD node, score
    RETURN node.name

The problem now is that we do not know if the results provided by the index were because of a match to the `name` or the `surname` property.
Results from the surname need to be excluded by the security rules, because they require that the user cannot see any `surname properties.
However, the security model is not able to introspect the _Lucene_ query to know what it will actually do, whether it works only on the allowed `name` property, or also on the disallowed `surname` property.
We know that the earlier query returned a match for `Joe Andy` which should now be filtered out.
So, in order to never return results the user should not be able to see, we have to block all results.
The steps taken by the query engine would be:

* Determine if the full-text index includes denylisted properties
* If yes, return an empty results stream, otherwise process as before

The query will therefore return zero results in this case, rather than simply returning only the `Andy` result that might be expected.
