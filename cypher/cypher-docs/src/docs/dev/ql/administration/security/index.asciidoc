[[administration-security]]
= Security

[abstract]
--
This section explains how to use Cypher to manage Neo4j role-based access control and fine-grained security.
--

* <<administration-security-introduction, Introduction>>
* <<administration-security-users-and-roles, User and role management>>
** <<administration-security-users, User management>>
*** <<administration-security-users-show, Listing users>>
*** <<administration-security-users-create, Creating users>>
*** <<administration-security-users-alter, Modifying users>>
*** <<administration-security-users-alter-password, Changing the current user's password>>
*** <<administration-security-users-drop, Deleting users>>
** <<administration-security-roles, Role management>>
*** <<administration-security-roles-show, Listing roles>>
*** <<administration-security-roles-create, Creating roles>>
*** <<administration-security-roles-drop, Deleting roles>>
*** <<administration-security-roles-grant, Assigning roles>>
*** <<administration-security-roles-revoke, Revoking roles>>
* <<administration-security-subgraph, Database, graph and sub-graph access control>>
** <<administration-security-subgraph-introduction, The GRANT and DENY commands>>
** <<administration-security-subgraph-traverse, The TRAVERSE privilege>>
** <<administration-security-subgraph-read, The READ privilege>>
** <<administration-security-subgraph-match, The MATCH privilege>>
** <<administration-security-subgraph-revoke, The REVOKE command>>
* <<administration-security-administration, Security of Administration>>
** <<administration-security-administration-introduction, The 'admin' role>>
** <<administration-security-administration-database-privileges, Database administration>>
** <<administration-security-administration-dbms-privileges, DBMS administration>>

[[administration-security-introduction]]
== Introduction
Neo4j has a complex security model stored in the system graph, maintained in a special database called the `system` database.
All administrative commands need to be executing against the `system` database.
For more information on how to manage multiple databases, refer to the section on <<administration-databases, administering databases>>.
Neo4j 3.1 introduced the concept of _role-based access control_.
It was possible to create users and assign them to roles to control whether the users could read, write and administer the database.
In Neo4j 4.0 this model was enhanced significantly with the addition of _privileges_ which are the underlying access-control rules by which the users rights are defined.
The original built-in roles still exist with almost the exact same access rights, but they are no-longer statically defined.
Instead they are defined in terms of their underlying _privileges_ and they can be modified by adding an removing these access rights.
In addition any new roles created can by assigned any combination of _privileges_ to create the specific access control desired.
A major additional capability is _sub-graph_ access control whereby read-access to the graph can be limited to specific combinations of label, relationship-type and property.

include::administration-security-users-and-roles.adoc[leveloffset=+1]

include::administration-security-subgraph.adoc[leveloffset=+1]

include::administration-security-administration.adoc[leveloffset=+1]
