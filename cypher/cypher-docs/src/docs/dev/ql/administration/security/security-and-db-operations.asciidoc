The rules of a security model can have some impact on some of the database operations.
This comes down to necessary additional security checks that incur additional data accesses.
Especially when it comes to count store operations, as they are usually very fast lookups, this difference might be noticeable.

Lets look at the following security rules that setup a "restricted" and a "free" role as an example:

     GRANT TRAVERSE ON GRAPH * NODES Person TO restricted;
     DENY TRAVERSE ON GRAPH * NODES Customer TO restricted;
     GRANT TRAVERSE ON GRAPH * ELEMENTS * TO free;

Now, lets look at what the database needs to do in order to execute the following query:

     MATCH (n:Person) RETURN count(n);

For both roles the execution plan will look like this:

[listing]
....
+--------------------------+
| Operator                 |
+--------------------------+
| +ProduceResults          |
| |                        +
| +NodeCountFromCountStore |
+--------------------------+
....

Internally however, very different operations need to be executed. The following table illustrate the difference.

[%header,cols=2*]
|===
|User with "free" role
|User with "restricted" role

|The database can access the count store and retrieve the total number of nodes with the label `:Person`.

This is a very quick operation.

|The database can not just access the count store because it must make sure that only nodes with the desired label `:Person` are counted.
Do to this, each node with the `:Person` label needs to be accessed and examined to make sure that it does not also have any blacklisted label like `:Customer`.

Due to the additional data accesses that the security checks need to do, this operation will be slower compared to executing the query as an unrestricted user.

|===
