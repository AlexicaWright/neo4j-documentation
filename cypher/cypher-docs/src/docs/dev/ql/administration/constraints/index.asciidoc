[[administration-constraints]]
= Constraints

[abstract]
Neo4j helps enforce data integrity with the use of constraints.
Constraints can be applied to either nodes or relationships.
Unique node property constraints can be created, along with node and relationship property existence constraints, and node key constraints, which guarantee both existence and uniqueness.

* <<administration-constraints-introduction, Introduction>>
* <<administration-constraints-naming, Named constraints>>
 ** <<administration-constraints-drop-a-constraint-by-name, Drop a constraint by name>>
* <<administration-constraints-unique-nodes, Unique node property constraints>>
 ** <<administration-constraints-create-a-unique-constraint, Create a unique constraint>>
 ** <<administration-constraints-create-a-named-unique-constraint, Create a named unique constraint>>
 ** <<administration-constraints-drop-a-unique-constraint, Drop a unique constraint>>
 ** <<administration-constraints-create-a-node-that-complies-with-unique-property-constraints, Create a node that complies with unique property constraints>>
 ** <<administration-constraints-create-a-node-that-violates-a-unique-property-constraint, Create a node that violates a unique property constraint>>
 ** <<administration-constraints-failure-to-create-a-unique-property-constraint-due-to-conflicting-nodes, Failure to create a unique property constraint due to conflicting nodes>>
* <<administration-constraints-get-a-list-of-all-constraints-in-the-database, Get a list of all constraints in the database>>
* <<administration-constraints-prop-exist-nodes, Node property existence constraints>>
 ** <<administration-constraints-create-a-node-property-existence-constraint, Create a node property existence constraint>>
 ** <<administration-constraints-create-a-named-node-property-existence-constraint, Create a named node property existence constraint>>
 ** <<administration-constraints-drop-a-node-property-existence-constraint, Drop a node property existence constraint>>
 ** <<administration-constraints-create-a-node-that-complies-with-property-existence-constraints, Create a node that complies with property existence constraints>>
 ** <<administration-constraints-create-a-node-that-violates-a-property-existence-constraint, Create a node that violates a property existence constraint>>
 ** <<administration-constraints-removing-an-existence-constrained-node-property, Removing an existence constrained node property>>
 ** <<administration-constraints-failure-to-create-a-node-property-existence-constraint-due-to-existing-node, Failure to create a node property existence constraint due to existing node>>
* <<administration-constraints-prop-exist-rels, Relationship property existence constraints>>
 ** <<administration-constraints-create-a-relationship-property-existence-constraint, Create a relationship property existence constraint>>
 ** <<administration-constraints-create-a-named-relationship-property-existence-constraint, Create a named relationship property existence constraint>>
 ** <<administration-constraints-drop-a-relationship-property-existence-constraint, Drop a relationship property existence constraint>>
 ** <<administration-constraints-create-a-relationship-that-complies-with-property-existence-constraints, Create a relationship that complies with property existence constraints>>
 ** <<administration-constraints-create-a-relationship-that-violates-a-property-existence-constraint, Create a relationship that violates a property existence constraint>>
 ** <<administration-constraints-removing-an-existence-constrained-relationship-property, Removing an existence constrained relationship property>>
 ** <<administration-constraints-failure-to-create-a-relationship-property-existence-constraint-due-to-existing-relationship, Failure to create a relationship property existence constraint due to existing relationship>>
* <<administration-constraints-node-key, Node key constraints>>
 ** <<administration-constraints-create-a-node-key-constraint, Create a node key constraint>>
 ** <<administration-constraints-create-a-named-node-key-constraint, Create a named node key constraint>>
 ** <<administration-constraints-drop-a-node-key-constraint, Drop a node key constraint>>
 ** <<administration-constraints-create-a-node-that-complies-with-node-key-constraints, Create a node that complies with node key constraints>>
 ** <<administration-constraints-create-a-node-that-violates-a-node-key-constraint, Create a node that violates a node key constraint>>
 ** <<administration-constraints-removing-a-node-key-constrained-property, Removing a `NODE KEY`-constrained property>>
 ** <<administration-constraints-failure-to-create-a-node-key-constraint-due-to-existing-node, Failure to create a node key constraint due to existing node>>


[[administration-constraints-introduction]]
== Introduction

The following constraint types are available:

*Unique property constraints*::
Unique property constraints ensure that property values are unique for all nodes with a specific label.
Unique constraints do not mean that all nodes have to have a unique value for the properties -- nodes without the property are not subject to this rule.

*[enterprise-edition]#Property existence constraints#*::
Property existence constraints ensure that a property exists for all nodes with a specific label or for all relationships with a specific type.
All queries that try to create new nodes or relationships without the property, or queries that try to remove the mandatory property will now fail.

*[enterprise-edition]#Node key constraints#*::
Node key constraints ensure that, for a given label and set of properties:
+
[lowerroman]
. All the properties exist on all the nodes with that label.
. The combination of the property values is unique.

+
Queries attempting to do any of the following will fail:

* Create new nodes without all the properties or where the combination of property values is not unique.
* Remove one of the mandatory properties.
* Update the properties so that the combination of property values is no longer unique.


[NOTE]
Property existence constraints and node key constraints are only available in Neo4j Enterprise Edition.
Note that databases with property existence constraints and/or node key constraints cannot be opened using Neo4j Community Edition.

A given label can have multiple constraints, and unique and property existence constraints can be combined on the same property.

Adding constraints is an atomic operation that can take a while -- all existing data has to be scanned before Neo4j can turn the constraint 'on'.

Creating a constraint has the following implications on indexes:

* Adding a unique property constraint on a property will also add a <<administration-indexes-create-a-single-property-index, single-property index>> on that property, so such an index cannot be added separately.
* Adding a node key constraint for a set of properties will also add a <<administration-indexes-create-a-composite-index, composite index>> on those properties, so such an index cannot be added separately.
* Cypher will use these indexes for lookups just like other indexes; see the <<administration-indexes,Indexes>> section for more details on the rules governing their behavior.
* If a unique property constraint is dropped and the single-property index on the property is still required, the index will need to be created explicitly.
* If a node key constraint is dropped and the composite-property index on the properties is still required, the index will need to be created explicitly.

[NOTE]
Constraint creation is not idempotent, but throws when creating the same constraint twice.

[[administration-constraints-naming]]
== Named constraints

When created, a constraint may be given a name. The name needs to be unique among both indexes and constraints.
If no name is given during creation, a unique name will be generated for the constraint.
To drop a constraint, the preferred way is to drop it by name.

include::drop-a-constraint-by-name.asciidoc[leveloffset=+1]

[[administration-constraints-unique-nodes]]
== Unique node property constraints

include::create-a-unique-constraint.asciidoc[leveloffset=+1]

include::create-a-named-unique-constraint.asciidoc[leveloffset=+1]

[role=deprecated]
include::drop-a-unique-constraint.asciidoc[leveloffset=+1]

include::create-a-node-that-complies-with-unique-property-constraints.asciidoc[leveloffset=+1]

include::create-a-node-that-violates-a-unique-property-constraint.asciidoc[leveloffset=+1]

include::failure-to-create-a-unique-property-constraint-due-to-conflicting-nodes.asciidoc[leveloffset=+1]

include::get-a-list-of-all-constraints-in-the-database.asciidoc[]


[role=enterprise-edition]
[[administration-constraints-prop-exist-nodes]]
== Node property existence constraints

include::create-a-node-property-existence-constraint.asciidoc[leveloffset=+1]

include::create-a-named-node-property-existence-constraint.asciidoc[leveloffset=+1]

[role=deprecated]
include::drop-a-node-property-existence-constraint.asciidoc[leveloffset=+1]

include::create-a-node-that-complies-with-property-existence-constraints.asciidoc[leveloffset=+1]

include::create-a-node-that-violates-a-property-existence-constraint.asciidoc[leveloffset=+1]

include::removing-an-existence-constrained-node-property.asciidoc[leveloffset=+1]

include::failure-to-create-a-node-property-existence-constraint-due-to-existing-node.asciidoc[leveloffset=+1]


[role=enterprise-edition]
[[administration-constraints-prop-exist-rels]]
== Relationship property existence constraints

include::create-a-relationship-property-existence-constraint.asciidoc[leveloffset=+1]

include::create-a-named-relationship-property-existence-constraint.asciidoc[leveloffset=+1]

[role=deprecated]
include::drop-a-relationship-property-existence-constraint.asciidoc[leveloffset=+1]

include::create-a-relationship-that-complies-with-property-existence-constraints.asciidoc[leveloffset=+1]

include::create-a-relationship-that-violates-a-property-existence-constraint.asciidoc[leveloffset=+1]

include::removing-an-existence-constrained-relationship-property.asciidoc[leveloffset=+1]

include::failure-to-create-a-relationship-property-existence-constraint-due-to-existing-relationship.asciidoc[leveloffset=+1]


[role=enterprise-edition]
[[administration-constraints-node-key]]
== Node key constraints

include::create-a-node-key-constraint.asciidoc[leveloffset=+1]

include::create-a-named-node-key-constraint.asciidoc[leveloffset=+1]

[role=deprecated]
include::drop-a-node-key-constraint.asciidoc[leveloffset=+1]

include::create-a-node-that-complies-with-node-key-constraints.asciidoc[leveloffset=+1]

include::create-a-node-that-violates-a-node-key-constraint.asciidoc[leveloffset=+1]

include::removing-a-node-key-constrained-property.asciidoc[leveloffset=+1]

include::failure-to-create-a-node-key-constraint-due-to-existing-node.asciidoc[leveloffset=+1]
