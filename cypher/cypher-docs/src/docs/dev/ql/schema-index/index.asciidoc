[[query-schema-index]]
= Indexes

[abstract]
--
This section explains how to configure indexes to enhance performance in search, and to support full-text search.
--

* <<query-schema-index-introduction, Managing Indexes>>
** <<schema-index-single-vs-composite-index, Composite index limitations>>
** <<schema-index-create-a-single-property-index, Create a single-property index>>
** <<schema-index-create-a-composite-index, Create a composite index>>
** <<schema-index-get-a-list-of-all-indexes-in-the-database, Get a list of all indexes in the database>>
** <<schema-index-drop-a-single-property-index, Drop a single-property index>>
** <<schema-index-drop-a-composite-index, Drop a composite index>>
* <<schema-index-using-indexes, Using indexes>>
** <<schema-index-equality-check-using-where-single-property-index, Equality check using `WHERE` (single-property index)>>
** <<schema-index-equality-check-using-where-composite-index, Equality check using `WHERE` (composite index)>>
** <<schema-index-range-comparisons-using-where-single-property-index, Range comparisons using `WHERE` (single-property index)>>
** <<schema-index-range-comparisons-using-where-composite-index, Range comparisons using `WHERE` (composite index)>>
** <<schema-index-multiple-range-comparisons-using-where-single-property-index, Use index with `WHERE` using multiple range comparisons (single-property index)>>
** <<schema-index-multiple-range-comparisons-using-where-composite-index, Use index with `WHERE` using multiple range comparisons (composite index)>>
** <<schema-index-list-membership-check-using-in-single-property-index, List membership using `IN` (single-property index)>>
** <<schema-index-list-membership-check-using-in-composite-index, List membership check using `IN` (composite index)>>
** <<schema-index-prefix-search-using-starts-with-single-property-index, Prefix search using `STARTS WITH` (single-property index)>>
** <<schema-index-prefix-search-using-starts-with-composite-index, Prefix search using `STARTS WITH` (composite index)>>
** <<schema-index-suffix-search-using-ends-with-single-property-index, Suffix search using `ENDS WITH` (single-property index)>>
** <<schema-index-substring-search-using-contains-single-property-index, Substring search using `CONTAINS` (single-property index)>>
** <<schema-index-existence-check-using-exists-single-property-index, Existence check using `exists` (single-property index)>>
** <<schema-index-existence-check-using-exists-composite-index, Existence check using `exists` (composite index)>>
** <<schema-index-spatial-distance-searches-single-property-index, Use index when executing a spatial distance search (single-property index)>>
** <<schema-index-spatial-distance-searches-composite-index, Use index when executing a spatial distance search (composite index)>>
** <<schema-index-spatial-bounding-box-searches-single-property-index, Use index when executing a spatial bounding box search (single-property index)>>
** <<schema-index-spatial-bounding-box-searches-composite-index, Use index when executing a spatial bounding box search (composite index)>>
* <<schema-index-fulltext-search, Indexes to support full-text search>>
** <<schema-index-fulltext-search-introduction, Introduction>>
** <<schema-index-fulltext-search-manage, Procedures to manage full-text schema indexes>>
** <<schema-index-fulltext-search-create-and-configure, Create and configure full-text schema indexes>>
** <<schema-index-fulltext-search-query, Query full-text schema indexes>>
** <<schema-index-fulltext-search-drop, Drop full-text indexes>>
* <<explicit-indexes-procedures, Manage and use explicit indexes>>


[[query-schema-index-introduction]]
== Managing Indexes

A database index is a redundant copy of some of the data in the database for the purpose of making searches of related data more efficient.
This comes at the cost of additional storage space and slower writes, so deciding what to index and what not to index is an important and often non-trivial task.

Cypher enables the creation of indexes on one or more properties for all nodes that have a given label:

* An index that is created on a single property for any given label is called a _single-property index_.
* An index that is created on more than one property for any given label is called a _composite index_.
  Differences in the usage patterns between composite and single-property indexes are described in
  <<schema-index-single-vs-composite-index, composite index limitations>> and shown in the examples below.

Once an index has been created, it will automatically be managed and kept up to date by the database when the graph is changed.
Neo4j will automatically pick up and start using the index once it has been created and brought online.

[NOTE]
<<query-using>> describes how to make the Cypher planner use specific indexes (especially in cases where the planner would not necessarily have used them).

[NOTE]
.Index configuration and limitations
====
For information on index configuration and limitations, refer to <<operations-manual#index-configuration, Operations Manual -> Index configuration>>.
====

[[schema-index-single-vs-composite-index]]
=== Composite index limitations

Unlike single-property indexes, composite indexes currently support only a subset of predicates:

* equality check: `n.prop = value`
* list membership check: `n.prop IN list`
* existence check: `exists(n.prop)`
* range search: `n.prop > value`
* prefix search: `STARTS WITH`

However, predicates might be planned as existence check and a filter.
For this to not happen, these restrictions need to be followed:

* If there is any `equality check` and `list membership check` predicates,
they need to be for the first properties defined by the index.
* There can be up to one `range search` or `prefix search` predicate.
* There can be any number of `existence check` predicates.
* Any predicate after a `range search`, `prefix search` or `existence check` predicate has to be an `existence check` predicate

For example, an index on `:Label(prop1,prop2,prop3,prop4,prop5,prop6)` and predicates:

```
WHERE n.prop1 = 'x' AND n.prop2 = 1 AND n.prop3 > 5 AND n.prop4 < 'e' AND n.prop5 = true AND exists(n.prop6)
```

will be planned as:

```
WHERE n.prop1 = 'x' AND n.prop2 = 1 AND n.prop3 > 5 AND exists(n.prop4) AND exists(n.prop5) AND exists(n.prop6)
```

with filters on `n.prop4 < 'e'` and `n.prop5 = true`, since `n.prop3` has a `range search` predicate.

Queries containing the following types of predicates on properties in the index are not supported (not even as existence check and filter):

* suffix search: `ENDS WITH`
* substring search: `CONTAINS`

Composite indexes require predicates on all properties indexed.
If there are predicates on only a subset of the indexed properties, it will not be possible to use the composite index.
To get this kind of fallback behavior, it is necessary to create additional indexes on the relevant sub-set of properties or on single properties.


include::create-a-single-property-index.asciidoc[leveloffset=+1]

include::create-a-composite-index.asciidoc[leveloffset=+1]

include::get-a-list-of-all-indexes-in-the-database.asciidoc[leveloffset=+1]

include::drop-a-single-property-index.asciidoc[leveloffset=+1]

include::drop-a-composite-index.asciidoc[leveloffset=+1]

include::using-indexes.asciidoc[]

include::equality-check-using-where-single-property-index.asciidoc[leveloffset=+1]

include::equality-check-using-where-composite-index.asciidoc[leveloffset=+1]

include::range-comparisons-using-where-single-property-index.asciidoc[leveloffset=+1]

include::range-comparisons-using-where-composite-index.asciidoc[leveloffset=+1]

include::multiple-range-comparisons-using-where-single-property-index.asciidoc[leveloffset=+1]

include::multiple-range-comparisons-using-where-composite-index.asciidoc[leveloffset=+1]

include::list-membership-check-using-in-single-property-index.asciidoc[leveloffset=+1]

include::list-membership-check-using-in-composite-index.asciidoc[leveloffset=+1]

include::prefix-search-using-starts-with-single-property-index.asciidoc[leveloffset=+1]

include::prefix-search-using-starts-with-composite-index.asciidoc[leveloffset=+1]

include::suffix-search-using-ends-with-single-property-index.asciidoc[leveloffset=+1]

include::substring-search-using-contains-single-property-index.asciidoc[leveloffset=+1]

include::existence-check-using-exists-single-property-index.asciidoc[leveloffset=+1]

include::existence-check-using-exists-composite-index.asciidoc[leveloffset=+1]

include::spatial-distance-searches-single-property-index.asciidoc[leveloffset=+1]

include::spatial-distance-searches-composite-index.asciidoc[leveloffset=+1]

include::spatial-bounding-box-searches-single-property-index.asciidoc[leveloffset=+1]

include::spatial-bounding-box-searches-composite-index.asciidoc[leveloffset=+1]

include::fulltext-schema-index.adoc[leveloffset=+1]

include::explicit-index-procedures.adoc[leveloffset=+1]
