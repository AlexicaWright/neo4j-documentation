[[query-function]]
= Functions


[abstract]
--
This section contains information on all functions in the Cypher query language.
--

* Predicate functions [<<header-query-predicates, Summary>>|<<query-predicates, Detail>>]
* Scalar functions [<<header-query-functions-scalar, Summary>>|<<query-functions-scalar, Detail>>]
* Aggregating functions [<<header-query-functions-aggregating, Summary>>|<<query-functions-aggregating, Detail>>]
* List functions [<<header-query-functions-list, Summary>>|<<query-functions-list, Detail>>]
* Mathematical functions [<<header-query-functions-mathematical, Summary>>|<<query-functions-mathematical, Detail>>]
** Numeric functions [<<header-query-functions-numeric, Summary>>|<<query-functions-numeric, Detail>>]
** Logarithmic functions [<<header-query-functions-logarithmic, Summary>>|<<query-functions-logarithmic, Detail>>]
** Trigonometric functions [<<header-query-functions-trigonometric, Summary>>|<<query-functions-trigonometric, Detail>>]
* String functions [<<header-query-functions-string, Summary>>|<<query-functions-string, Detail>>]
* Spatial functions [<<header-query-functions-spatial, Summary>>|<<query-functions-spatial, Detail>>]

Note that related information exists in <<query-operators>>.

Most functions in Cypher will return `null` if an input parameter is `null`.


[[header-query-predicates]]
**<<query-predicates, Predicate functions>>**

These functions return either true or false for the arguments given.

[options="header"]
|===
|Function                         |   Description
|<<functions-all,all()>>          | Tests whether a predicate holds for all elements in the list.
|<<functions-any,any()>>          | Tests whether a predicate holds for at least one element in the list.
|<<functions-exists,exists()>>    | Returns true if a match for the pattern exists in the graph, or the property exists in the node, relationship or map.
|<<functions-none,none()>>        | Returns true if the predicate holds for no element in the list.
|<<functions-single,single()>>    | Returns true if the predicate holds for exactly one of the elements in the list.
|===


[[header-query-functions-scalar]]
**<<query-functions-scalar, Scalar functions>>**

These functions return a single value.

[options="header"]
|===
|Function                                           | Description
|<<functions-coalesce,coalesce()>>                  | Returns the first non-`null` value in the list of expressions passed to it.
|<<functions-endnode,endNode()>>                    | Returns the last node of a relationship.
|<<functions-head,head()>>                          | Returns the first element in a list.
|<<functions-id,id()>>                              | Returns the id of the relationship or node.
|<<functions-last,last()>>                          | Returns the last element in a list.
|<<functions-length,length()>>               | Returns the length of a path.
|<<functions-properties,properties()>>              | If the argument is a node or a relationship, the returned map is a map of its properties.
|<<functions-size,size()>>                   | Returns the number of items in a list.
|<<functions-size-of-pattern-expression,Size of pattern expression>>    | Returns the number of sub-graphs matching the pattern expression.
|<<functions-size-of-string,Size of string>>   | Returns the size of a string.
|<<functions-startnode,startNode()>>                | Returns the first node of a relationship.
|<<functions-timestamp,timestamp()>>                | Returns the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC.
|<<functions-tofloat,toFloat()>>                    | Converts the argument to a float and returns the result.
|<<functions-toint,toInt()>>                        | Converts the argument to an integer and returns the result.
|<<functions-type,type()>>                          | Returns a string representation of the relationship type.
|===


[[header-query-functions-aggregating]]
**<<query-functions-aggregating, Aggregating functions>>**

These functions take multiple values as arguments, and calculate and return an aggregated value from them.

[options="header"]
|===
|Function                                       | Description
|<<functions-avg,avg()>>                        | Returns the average of a numeric column.
|<<functions-collect,collect()>>                | Returns a list containing all collected values.
|<<functions-count,count()>>                    | Returns the number of rows.
|<<functions-max,max()>>                        | Returns the highest value in a numeric column.
|<<functions-min,min()>>                        | Returns the lowest value in a numeric column.
|<<functions-percentilecont,percentileCont()>>  | Returns the percentile of a given value over a group using linear interpolation.
|<<functions-percentiledisc,percentileDisc()>>  | Returns the nearest value to a given percentile over a group using a rounding method.
|<<functions-stdev,stDev()>>                    | Returns the standard deviation for a given value over a group for a sample of a population.
|<<functions-stdevp,stDevP()>>                  | Returns the standard deviation for a given value over a group for an entire population.
|<<functions-sum,sum()>>                        | Returns the sum of a numeric column.
|===


[[header-query-functions-list]]
**<<query-functions-list, List functions>>**

These functions return lists of other values.
Further details and examples of lists may be found in <<syntax-lists>>.

[options="header"]
|===
|Function                                       | Description
|<<functions-extract,extract()>>                | Returns a single property, or the value of a function from a list of nodes or relationships.
|<<functions-filter,filter()>>                  | Returns all the elements in a list complying with a predicate.
|<<functions-keys,keys()>>                      | Returns a list of string representations for the property names of a node, relationship, or map.
|<<functions-labels,labels()>>                  | Returns a list of string representations for the labels attached to a node.
|<<functions-nodes,nodes()>>                    | Returns all nodes in a path.
|<<functions-range,range()>>                    | Returns numerical values in a range.
|<<functions-reduce,reduce()>>                  | Runs an expression against individual elements of a list, storing the result of the expression in an accumulator.
|<<functions-relationships,relationships()>>    | Returns all relationships in a path.
|<<functions-tail,tail()>>                      | Returns all but the first element in a list.
|===


[[header-query-functions-mathematical]]
**<<query-functions-mathematical, Mathematical functions>>**

These functions all operate on numerical expressions only, and will return an error if used on any other values.


[[header-query-functions-numeric]]
**<<query-functions-numeric, Numeric functions>>**

[options="header"]
|===
| Function                     | Description
| <<functions-abs, abs()>>     | Returns the absolute value of a number.
| <<functions-ceil, ceil()>>   | Returns the smallest integer greater than or equal to the argument.
| <<functions-floor, floor()>> | Returns the greatest integer less than or equal to the expression.
| <<functions-rand, rand()>>   | Returns a random number in the range from 0 (inclusive) to 1 (exclusive), `[0, 1)`.
| <<functions-round, round()>> | Returns the numerical expression, rounded to the nearest integer.
| <<functions-sign, sign()>>   | Returns the signum of a number -- zero if the expression is zero, `-1` for any negative number, and `1` for any positive number.
|===


[[header-query-functions-logarithmic]]
**<<query-functions-logarithmic, Logarithmic functions>>**

[options="header"]
|===
| Function                     | Description
| <<functions-e, e()>>         | Returns the base of the natural logarithm, `e`.
| <<functions-exp, exp()>>     | Returns `e^n`, where `e` is the base of the natural logarithm, and `n` is the value of the argument expression.
| <<functions-log, log()>>     | Returns the natural logarithm of the expression.
| <<functions-log10, log10()>> | Returns the common logarithm (base 10) of the expression.
| <<functions-sqrt, sqrt()>>   | Returns the square root of a number.
|===


[[header-query-functions-trigonometric]]
**<<query-functions-trigonometric, Trigonometric functions>>**

All trigonometric functions operate on radians, unless otherwise specified.

[options="header"]
|===
| Function                           | Description
| <<functions-acos, acos()>>         | Returns the arccosine of the expression.
| <<functions-asin, asin()>>         | Returns the arcsine of the expression.
| <<functions-atan, atan()>>         | Returns the arctangent of the expression.
| <<functions-atan2, atan2()>>       | Returns the arctangent2 of a set of coordinates.
| <<functions-cos, cos()>>           | Returns the cosine of the expression.
| <<functions-cot, cot()>>           | Returns the cotangent of the expression.
| <<functions-degrees, degrees()>>   | Converts radians to degrees.
| <<functions-haversin, haversin()>> | Returns half the versine of the expression.
| <<functions-pi, pi()>>             | Returns the mathematical constant _pi_.
| <<functions-radians, radians()>>   | Converts degrees to radians.
| <<functions-sin, sin()>>           | Returns the sine of the expression.
| <<functions-tan, tan()>>           | Returns the tangent of the expression.
|===


[[header-query-functions-string]]
**<<query-functions-string, String functions>>**

These functions are used to manipulate strings or to create a string representation of another value.

[options="header"]
|===
|Function                               |   Description
|<<functions-left,left()>>              | Returns a string containing the left n characters of the original string.
|<<functions-ltrim,lTrim()>>            | Returns the original string with whitespace removed from the left side.
|<<functions-replace,replace()>>        | Returns a string with the search string replaced by the replace string, replacing all occurrences.
|<<functions-reverse,reverse()>>        | Returns the original string reversed.
|<<functions-right,right()>>            | Returns a string containing the right n characters of the original string.
|<<functions-rtrim,rTrim()>>            | Returns the original string with whitespace removed from the right side.
|<<functions-split,split()>>            | Returns the sequence of strings which are delimited by split patterns.
|<<functions-substring,substring()>>    | Returns a substring of the original, with a 0-based index start and length.
|<<functions-tolower,toLower()>>            | Returns the original string in lowercase.
|<<functions-tostring,toString()>>      | Converts the argument to a string.
|<<functions-toupper,toUpper()>>            | Returns the original string in uppercase.
|<<functions-trim,trim()>>              | Returns the original string with whitespace removed from both sides.
|===


[[header-query-functions-spatial]]
**<<query-functions-spatial, Spatial functions>>**

These functions are used to specify points in a 2D coordinate system and to calculate the geodesic distance between two points.

[options="header"]
|===
|Function                               |   Description
|<<functions-distance,distance()>>      | Returns a floating point number representing the geodesic distance between any two given points.
|<<functions-point-cartesian,point() - cartesian 2D>>            | Returns a point object, given two coordinate values in the cartesian coordinate system.
|<<functions-point,point() - WGS 84>>            | Returns a point object, given two coordinate valuesin the WGS 84 coordinate system.

|===


[[query-predicates]]
== Predicate functions

Predicates are boolean functions that return true or false for a given set of input.
They are most commonly used to filter out subgraphs in the `WHERE` part of a query.

* <<functions-all,all()>>
* <<functions-any,any()>>
* <<functions-exists,exists()>>
* <<functions-none,none()>>
* <<functions-single,single()>>

See also <<query-operators-comparison>>.

.Graph
include::includes/cypher-functions-graph.asciidoc[]

include::all.asciidoc[leveloffset=+1]

include::any.asciidoc[leveloffset=+1]

include::exists.asciidoc[leveloffset=+1]

include::none.asciidoc[leveloffset=+1]

include::single.asciidoc[leveloffset=+1]


[[query-functions-scalar]]
== Scalar functions

Scalar functions return a single value.

[IMPORTANT]
The `length()` and `size()` functions are quite similar, and so it is important to take note of the difference.
Due to backwards compatibility, `length()` currently works on four types: strings, paths, lists and pattern expressions.
However, it is recommended to use `length()` only for paths, and the `size()` function for strings, lists and pattern expressions.
`length()` on those types may be deprecated in future.

* <<functions-coalesce,coalesce()>>
* <<functions-endnode,endNode()>>
* <<functions-head,head()>>
* <<functions-id,id()>>
* <<functions-last,last()>>
* <<functions-length,length()>>
* <<functions-properties,properties()>>
* <<functions-size,size()>>
* <<functions-size-of-pattern-expression,Size of pattern expression>>
* <<functions-size-of-string,Size of string>>
* <<functions-startnode,startNode()>>
* <<functions-timestamp,timestamp()>>
* <<functions-tofloat,toFloat()>>
* <<functions-toint,toInt()>>
* <<functions-type,type()>>

.Graph
include::includes/cypher-functions-graph.asciidoc[]

include::coalesce.asciidoc[leveloffset=+1]

include::endnode.asciidoc[leveloffset=+1]

include::head.asciidoc[leveloffset=+1]

include::id.asciidoc[leveloffset=+1]

include::last.asciidoc[leveloffset=+1]

include::length.asciidoc[leveloffset=+1]

include::properties.asciidoc[leveloffset=+1]

include::size.asciidoc[leveloffset=+1]

include::size-of-pattern-expression.asciidoc[leveloffset=+1]

include::size-of-string.asciidoc[leveloffset=+1]

include::startnode.asciidoc[leveloffset=+1]

include::timestamp.asciidoc[leveloffset=+1]

include::tofloat.asciidoc[leveloffset=+1]

include::toint.asciidoc[leveloffset=+1]

include::type.asciidoc[leveloffset=+1]

//Aggregating functions

include::query-functions-aggregating.adoc[leveloffset=+1]


[[query-functions-list]]
== List functions

List functions return lists of things -- nodes in a path, and so on.

Further details and examples of lists may be found in <<syntax-lists>> and <<query-operators-list>>.

* <<functions-extract,extract()>>
* <<functions-filter,filter()>>
* <<functions-keys,keys()>>
* <<functions-labels,labels()>>
* <<functions-nodes,nodes()>>
* <<functions-range,range()>>
* <<functions-reduce,reduce()>>
* <<functions-relationships,relationships()>>
* <<functions-tail,tail()>>

.Graph
include::includes/cypher-functions-graph.asciidoc[]

include::extract.asciidoc[leveloffset=+1]

include::filter.asciidoc[leveloffset=+1]

include::keys.asciidoc[leveloffset=+1]

include::labels.asciidoc[leveloffset=+1]

include::nodes.asciidoc[leveloffset=+1]

include::range.asciidoc[leveloffset=+1]

include::reduce.asciidoc[leveloffset=+1]

include::relationships.asciidoc[leveloffset=+1]

include::tail.asciidoc[leveloffset=+1]

//Mathematical functions

include::query-functions-mathematical.adoc[leveloffset=+1]


[[query-functions-string]]
== String functions

These functions all operate on string expressions only, and will return an error if used on any other values.
The exception to this rule is `toString()`, which also accepts numbers and booleans.

See also <<query-operators-string>>.

[NOTE]
The functions `lower()` and `upper()` have been superseded by `toLower()` and `toUpper()`, respectively, and will be deprecated in a future release.

* <<functions-left,left()>>
* <<functions-ltrim,lTrim()>>
* <<functions-replace,replace()>>
* <<functions-reverse,reverse()>>
* <<functions-right,right()>>
* <<functions-rtrim,rTrim()>>
* <<functions-split,split()>>
* <<functions-substring,substring()>>
* <<functions-tolower,toLower()>>
* <<functions-tostring,toString()>>
* <<functions-toupper,toUpper()>>
* <<functions-trim,trim()>>


.Graph
include::includes/cypher-functions-graph.asciidoc[]

include::left.asciidoc[leveloffset=+1]

include::ltrim.asciidoc[leveloffset=+1]

include::replace.asciidoc[leveloffset=+1]

include::reverse.asciidoc[leveloffset=+1]

include::right.asciidoc[leveloffset=+1]

include::rtrim.asciidoc[leveloffset=+1]

include::split.asciidoc[leveloffset=+1]

include::substring.asciidoc[leveloffset=+1]

include::tolower.asciidoc[leveloffset=+1]

include::tostring.asciidoc[leveloffset=+1]

include::toupper.asciidoc[leveloffset=+1]

include::trim.asciidoc[leveloffset=+1]

//Spatial functions

include::query-functions-spatial.adoc[leveloffset=+1]

