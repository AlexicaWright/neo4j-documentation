[[query-function]]
= Functions


[abstract]
--
This section contains information on all functions in the Cypher query language.
--

* Predicate functions [<<header-query-predicates, Summary>>|<<query-functions-predicate, Detail>>]
* Scalar functions [<<header-query-functions-scalar, Summary>>|<<query-functions-scalar, Detail>>]
* Aggregating functions [<<header-query-functions-aggregating, Summary>>|<<query-functions-aggregating, Detail>>]
* List functions [<<header-query-functions-list, Summary>>|<<query-functions-list, Detail>>]
* Mathematical functions - numeric [<<header-query-functions-numeric, Summary>>|<<query-functions-mathematical-numeric, Detail>>]
* Mathematical functions - logarithmic [<<header-query-functions-logarithmic, Summary>>|<<query-functions-mathematical-logarithmic, Detail>>]
* Mathematical functions - trigonometric [<<header-query-functions-trigonometric, Summary>>|<<query-functions-mathematical-trigonometric, Detail>>]
* String functions [<<header-query-functions-string, Summary>>|<<query-functions-string, Detail>>]
* Temporal functions [<<header-query-functions-temporal, Summary>>|<<query-functions-temporal, Detail>>]
* Spatial functions [<<header-query-functions-spatial, Summary>>|<<query-functions-spatial, Detail>>]
* <<query-functions-udf, User-defined functions>>

Related information may be found in <<query-operators>>.

Most functions in Cypher will return `null` if an input parameter is `null`.

[NOTE]
Functions taking a string as input all operate on _Unicode characters_ rather than on a standard `char[]`.
For example, `size(s)`, where `s` is a character in the Chinese alphabet, will return *1*.


[[header-query-predicates]]
**<<query-functions-predicate, Predicate functions>>**

These functions return either true or false for the given arguments.

[options="header"]
|===
|Function                         |   Description
|<<functions-all,all()>>          | Tests whether the predicate holds for all elements in a list.
|<<functions-any,any()>>          | Tests whether the predicate holds for at least one element in a list.
|<<functions-exists,exists()>>    | Returns true if a match for the pattern exists in the graph, or if the specified property exists in the node, relationship or map.
|<<functions-none,none()>>        | Returns true if the predicate holds for no element in a list.
|<<functions-single,single()>>    | Returns true if the predicate holds for exactly one of the elements in a list.
|===


[[header-query-functions-scalar]]
**<<query-functions-scalar, Scalar functions>>**

These functions return a single value.

[options="header"]
|===
| Function                                                            | Description
| <<functions-coalesce,coalesce()>>                                   | Returns the first non-`null` value in a list of expressions.
| <<functions-endnode,endNode()>>                                     | Returns the end node of a relationship.
| <<functions-head,head()>>                                           | Returns the first element in a list.
| <<functions-id,id()>>                                               | Returns the id of a relationship or node.
| <<functions-last,last()>>                                           | Returns the last element in a list.
| <<functions-length,length()>>                                       | Returns the length of a path.
| <<functions-properties,properties()>>                               | Returns a map containing all the properties of a node or relationship.
| <<functions-randomuuid, randomUUID()>>                              | Returns a string value corresponding to a randomly-generated UUID.
| <<functions-size,size()>>                                           | Returns the number of items in a list.
| <<functions-size-of-pattern-expression,size() applied to pattern expression>> | Returns the number of sub-graphs matching the pattern expression.
| <<functions-size-of-string,size() applied to string>>                         | Returns the number of Unicode characters in a string.
| <<functions-startnode,startNode()>>                                 | Returns the start node of a relationship.
| <<functions-timestamp,timestamp()>>                                 | Returns the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC.
| <<functions-toboolean,toBoolean()>>                                 | Converts a string value to a boolean value.
| <<functions-tofloat,toFloat()>>                                     | Converts an integer or string value to a floating point number.
| <<functions-tointeger,toInteger()>>                                 | Converts a floating point or string value to an integer value.
| <<functions-type,type()>>                                           | Returns the string representation of the relationship type.
|===


[[header-query-functions-aggregating]]
**<<query-functions-aggregating, Aggregating functions>>**

These functions take multiple values as arguments, and calculate and return an aggregated value from them.

[options="header"]
|===
|Function                                       | Description
|<<functions-avg,avg()>>                        | Returns the average of a set of numeric values.
|<<functions-collect,collect()>>                | Returns a list containing the values returned by an expression.
|<<functions-count,count()>>                    | Returns the number of values or rows.
|<<functions-max,max()>>                        | Returns the maximum value in a set of values.
|<<functions-min,min()>>                        | Returns the minimum value in a set of values.
|<<functions-percentilecont,percentileCont()>>  | Returns the percentile of a value over a group using linear interpolation.
|<<functions-percentiledisc,percentileDisc()>>  | Returns the nearest value to the given percentile over a group using a rounding method.
|<<functions-stdev,stDev()>>                    | Returns the standard deviation for the given value over a group for a sample of a population.
|<<functions-stdevp,stDevP()>>                  | Returns the standard deviation for the given value over a group for an entire population.
|<<functions-sum,sum()>>                        | Returns the sum of a set of numeric values.
|===


[[header-query-functions-list]]
**<<query-functions-list, List functions>>**

These functions return lists of other values.
Further details and examples of lists may be found in <<cypher-lists>>.

[options="header"]
|===
|Function                                       | Description
|<<functions-extract,extract()>>                | Returns a list `l~result~` containing the values resulting from an expression which has been applied to each element in a list `list`.
|<<functions-filter,filter()>>                  | Returns a list `l~result~` containing all the elements from a list `list` that comply with a predicate.
|<<functions-keys,keys()>>                      | Returns a list containing the string representations for all the property names of a node, relationship, or map.
|<<functions-labels,labels()>>                  | Returns a list containing the string representations for all the labels of a node.
|<<functions-nodes,nodes()>>                    | Returns a list containing all the nodes in a path.
|<<functions-range,range()>>                    | Returns a list comprising all integer values within a specified range.
|<<functions-reduce,reduce()>>                  | Runs an expression against individual elements of a list, storing the result of the expression in an accumulator.
|<<functions-relationships,relationships()>>    | Returns a list containing all the relationships in a path.
|<<functions-reverse-list,reverse()>>           | Returns a list in which the order of all elements in the original list have been reversed.
|<<functions-tail,tail()>>                      | Returns all but the first element in a list.
|===


[[header-query-functions-numeric]]
**<<query-functions-mathematical-numeric, Mathematical functions - numeric>>**

These functions all operate on numerical expressions only, and will return an error if used on any other values.

[options="header"]
|===
| Function                     | Description
| <<functions-abs, abs()>>     | Returns the absolute value of a number.
| <<functions-ceil, ceil()>>   | Returns the smallest floating point number that is greater than or equal to a number and equal to a mathematical integer.
| <<functions-floor, floor()>> | Returns the largest floating point number that is less than or equal to a number and equal to a mathematical integer.
| <<functions-rand, rand()>>   | Returns a random floating point number in the range from 0 (inclusive) to 1 (exclusive); i.e. `[0,1)`.
| <<functions-round, round()>> | Returns the value of a number rounded to the nearest integer.
| <<functions-sign, sign()>>   | Returns the signum of a number: `0` if the number is `0`, `-1` for any negative number, and `1` for any positive number.
|===


[[header-query-functions-logarithmic]]
**<<query-functions-mathematical-logarithmic, Mathematical functions - logarithmic>>**

These functions all operate on numerical expressions only, and will return an error if used on any other values.

[options="header"]
|===
| Function                     | Description
| <<functions-e, e()>>         | Returns the base of the natural logarithm, `e`.
| <<functions-exp, exp()>>     | Returns `e^n`, where `e` is the base of the natural logarithm, and `n` is the value of the argument expression.
| <<functions-log, log()>>     | Returns the natural logarithm of a number.
| <<functions-log10, log10()>> | Returns the common logarithm (base 10) of a number.
| <<functions-sqrt, sqrt()>>   | Returns the square root of a number.
|===


[[header-query-functions-trigonometric]]
**<<query-functions-mathematical-trigonometric, Mathematical functions - trigonometric>>**

These functions all operate on numerical expressions only, and will return an error if used on any other values.

All trigonometric functions operate on radians, unless otherwise specified.

[options="header"]
|===
| Function                           | Description
| <<functions-acos, acos()>>         | Returns the arccosine of a number in radians.
| <<functions-asin, asin()>>         | Returns the arcsine of a number in radians.
| <<functions-atan, atan()>>         | Returns the arctangent of a number in radians.
| <<functions-atan2, atan2()>>       | Returns the arctangent2 of a set of coordinates in radians.
| <<functions-cos, cos()>>           | Returns the cosine of a number.
| <<functions-cot, cot()>>           | Returns the cotangent of a number.
| <<functions-degrees, degrees()>>   | Converts radians to degrees.
| <<functions-haversin, haversin()>> | Returns half the versine of a number.
| <<functions-pi, pi()>>             | Returns the mathematical constant _pi_.
| <<functions-radians, radians()>>   | Converts degrees to radians.
| <<functions-sin, sin()>>           | Returns the sine of a number.
| <<functions-tan, tan()>>           | Returns the tangent of a number.
|===


[[header-query-functions-string]]
**<<query-functions-string, String functions>>**

These functions are used to manipulate strings or to create a string representation of another value.

[options="header"]
|===
|Function                               |   Description
|<<functions-left,left()>>              | Returns a string containing the specified number of leftmost characters of the original string.
|<<functions-ltrim,lTrim()>>            | Returns the original string with leading whitespace removed.
|<<functions-replace,replace()>>        | Returns a string in which all occurrences of a specified string in the original string have been replaced by another (specified) string.
|<<functions-reverse,reverse()>>        | Returns a string in which the order of all characters in the original string have been reversed.
|<<functions-right,right()>>            | Returns a string containing the specified number of rightmost characters of the original string.
|<<functions-rtrim,rTrim()>>            | Returns the original string with trailing whitespace removed.
|<<functions-split,split()>>            | Returns a list of strings resulting from the splitting of the original string around matches of the given delimiter.
|<<functions-substring,substring()>>    | Returns a substring of the original string, beginning  with a 0-based index start and length.
|<<functions-tolower,toLower()>>            | Returns the original string in lowercase.
|<<functions-tostring,toString()>>      | Converts an integer, float or boolean value to a string.
|<<functions-toupper,toUpper()>>            | Returns the original string in uppercase.
|<<functions-trim,trim()>>              | Returns the original string with leading and trailing whitespace removed.
|===


[[header-query-functions-temporal]]
**<<query-functions-temporal, Temporal functions>>**

Values of the <<property-types, temporal types>> -- Date, Time, LocalTime, DateTime, LocalDateTime and Duration -- can be created using the following functions:


//[options="header"]
//|===
//|Function                               |   Description
//

//Parsing a Duration:
//
//duration("P14DT16H12M") - 14 days, 16 hours, and 12 minutes
//
//duration("P5M1.5D") - 5 months, 1 day, and 12 hours
//
//duration("PT0.75M") - 45 seconds
//
//duration("P2.5W") - 2 weeks, 3 days, and 12 hours
//

//
//=== 3. specifying which clock to use (subfunctions)
//
//transaction - which produces the same instant whenever it is invoked within the same transaction - but may produce a different time for different transactions.
//
//statement - which produces the same instant whenever it is invoked within the same statement - but may produce a different time for different statements in the same transaction.
//
//realtime - which will produce the instant of the live clock of the system.
//
//current time, in order to retrieve the current time in that timezone. For example:
//
//RETURN date.realtime('America/Los_Angeles') AS today_in_LA
//
//=== 5. creating temporal instant values from timestamps
//
//
//In order to work with such data, Cypher provides functions for converting such a numeric timestamp to a DateTime value:
//
//datetime({epochSeconds: $seconds, nanosecond: $nanos}) - Creates a DateTime value at the specified number of seconds and nanoseconds from the UNIX epoch in the UTC timezone.
//
//datetime({epochMillis: $millis}) - Creates a DateTime value at the specified number of milliseconds from the UNIX epoch in the UTC timezone.
//
//=== 6. Constructing Duration values
//
//This would for example create a Duration representing a day and a half:
//
//duration({days:1, hours:12})
//It is possible to have a duration where the amount of a smaller unit exceeds the threshold to a bigger unit, such as:
//
//duration({days:62, seconds:180000})
//
//Computing the Duration between two temporal instants
//In some cases it might be desirable to compute the logical difference (in days, months, years, etc) between two temporal instant values, this is done through the use of the duration.between "sub-function" of duration:
//
//duration.between(date("1984-10-11"), date("2015-06-24"))
//yields
//
//duration({years:30, months:8, days:13})
//In order to compute the difference between two temporal instants in one specific unit, Cypher supports specifying the unit group as a "sub-function" of the duration function as well. These sub-functions take the name of the smallest unit in the unit group (where seconds is considered the smallest unit in its group, since the smaller units are fractional seconds). In combination with the unit accessors this allows computing the numeric difference in specific units, such as in this example:
//
//duration.inDays(date("2014-10-11"), date("2015-08-06")).weeks
//yields
//
//42
//
//The supported duration sub-functions are:
//
//duration.between(a, b) - to compute the difference in multiple components between instant a and instant b.
//
//duration.inMonths(a, b) - to compute the difference in whole months (or quarters or years) between instant a and instant b.
//
//duration.inDays(a, b) - to compute the difference in whole days (or weeks) between instant a and instant b.
//
//duration.inSeconds(a, b) - to compute the difference in seconds (and fractions of seconds, or minutes or hours) between instant a and instant b.
//
//=== 7. Converting and composing temporal instant values
//
//Cypher provides a .truncate "sub-function" for each temporal instant type (i.e. datetime.truncate(…​), localdatetime.truncate(…​), date.truncate(…​), time.truncate(…​), and localtime.truncate(…​)).
//
//Example: date.truncate('millennium', datetime("2017-09-26T11:26:42+01")) yields date("2000-01-01")
//
//millennium
//Select the temporal instant corresponding to the millenium of the given instant.
//
//century
//Select the temporal instant corresponding to the century of the given instant.
//
//decade
//Select the temporal instant corresponding to the decade of the given instant.
//
//....
//
//yyyyyyyyyy


[[header-query-functions-spatial]]
**<<query-functions-spatial, Spatial functions>>**

These functions are used to specify 2D or 3D points in a Coordinate Reference System and to calculate the geodesic distance between two points.

[options="header"]
|===
|Function                               |   Description
|<<functions-distance,distance()>>      | Returns a floating point number representing the geodesic distance between any two points in the same CRS.
|<<functions-point-cartesian-2d,point() - Cartesian 2D>>            | Returns a 2D point object, given two coordinate values in the Cartesian coordinate system.
|<<functions-point-cartesian-3d,point() - Cartesian 3D>>    | Returns a 3D point object, given three coordinate values in the Cartesian coordinate system.
|<<functions-point-wgs84-2d,point() - WGS 84 2D>>            | Returns a 2D point object, given two coordinate values in the WGS 84 coordinate system.
|<<functions-point-wgs84-3d,point() - WGS 84 3D>> | Returns a 3D point object, given three coordinate values in the WGS 84 coordinate system.
|===

//Predicate functions

include::query-functions-predicate.adoc[leveloffset=+1]

//Scalar functions

include::query-functions-scalar.adoc[leveloffset=+1]

//Aggregating functions

include::query-functions-aggregating.adoc[leveloffset=+1]

//List functions

include::query-functions-list.adoc[leveloffset=+1]

//Mathematical functions - numeric

include::query-functions-mathematical-numeric.adoc[leveloffset=+1]

//Mathematical functions - logarithmic

include::query-functions-mathematical-logarithmic.adoc[leveloffset=+1]

//Mathematical functions - trigonometric

include::query-functions-mathematical-trigonometric.adoc[leveloffset=+1]

//String functions

include::query-functions-string.adoc[leveloffset=+1]

//Temporal functions

include::query-functions-temporal.adoc[leveloffset=+1]

//Spatial functions

include::query-functions-spatial.adoc[leveloffset=+1]

// User-defined functions

include::query-functions-udf.adoc[leveloffset=+1]


[[query-functions-user-defined-aggregation]]
=== User-defined aggregation functions ===

User-defined aggregation functions are written in Java, deployed into the database and are called in the same way as any other Cypher function.

This example shows how you invoke a user-defined aggregation function called `longestString` from Cypher.

include::call-a-user-defined-aggregation-function.asciidoc[leveloffset=+1]

For developing and deploying user-defined aggregation functions in Neo4j, see <<user-defined-aggregation-functions, Extending Neo4j -> User-defined aggregation functions>>.
