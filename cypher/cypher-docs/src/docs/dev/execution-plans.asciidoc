[[execution-plans]]
= Execution plans

[abstract]
--
This section describes operators used as part of an execution plan to execute a query in the Cypher query language.
--

Neo4j breaks down the work of executing a query into small pieces called operators.
Each operator is responsible for a small part of the overall query.
The operators are connected together in a pattern called a execution plan.

Each operator is annotated with statistics.

`Rows`::
The number of rows that the operator produced. Only available if the query was profiled.
`EstimatedRows`::
If Neo4j used the cost-based compiler you will see the estimated number of rows that will be produced by the operator.
The compiler uses this estimate to choose a suitable execution plan.
`DbHits`::
Each operator will ask the Neo4j storage engine to do work such as retrieving or updating data.
A _database hit_ is an abstract unit of this storage engine work.

See <<how-do-i-profile-a-query>> for how to view the execution plan for your query.

For a deeper understanding of how each operator works, see the relevant section.
Please remember that the statistics of the actual database where the queries run on will decide the plan used.
There is no guarantee that a specific query will always be solved with the same plan.

* <<execution-plan-operators-summary, Execution plan operators>>
* <<query-shortestpath-planning, Shortest path planning>>

// The conditional leveloffsets below are "wrong" for the neo4j/neo4j
// Asciidoc+DB45 docs build, but AsciiDoc is limited to a certain depth so it
// is not possible to set them correctly. The downstream docs build is happy
// with these values.


[[execution-plan-operators-summary]]
**Execution plan operators at a glance**

This table comprises all the execution plan operators ordered lexicographically.

[options="header"]
|===
|Name                                                                       | Description | Leaf? | Updating?
| <<query-plan-all-nodes-scan, AllNodesScan>>                                | Reads all nodes from the node store. | Y |
| <<query-plan-anti-conditional-apply, AntiConditionalApply>>                | Checks whether a variable is `null`, and if so the right-hand side will be executed. | |
| <<query-plan-anti-semi-apply, AntiSemiApply>>                              | Tests for the existence of a pattern predicate. | |
| <<query-plan-apply, Apply>>                                                | `Apply` works by performing a nested loop.  | |
| <<query-plan-argument, Argument>>                                | Indicates the variable to be used as an argument to the right-hand side of an `Apply` operator xxx.  | Y |
| <<query-plan-assert-same-node, AssertSameNode>>                            | Used to ensure that no uniqueness constraints are violated.  | |
| <<query-plan-cartesian-product, CartesianProduct>>                 | xx.  | |
| <<query-plan-conditional-apply, ConditionalApply>>                         | Checks whether a variable is not `null`, and if so the right-hand side will be executed.  | |
| <<query-plan-create-index, CreateIndex>>              | Creates an index xx.  | Y | Y
| <<query-plan-create-unique-constraint, CreateUniqueConstraint>>                  | Creates a unique constraint on a (label,property) pair.  | Y | Y
| <<query-plan-create-node, CreateNode>>              | Creates a node.  | Y | Y
| <<query-plan-create-node-property-existence-constraint, CreateNodePropertyExistenceConstraint>>     |  Creates an existence constraint on a node property.  | Y | Y
| <<query-plan-create-relationship, CreateRelationship>>              | Creates a relationship.  | | Y
| <<query-plan-create-relationship-property-existence-constraint, CreateRelationshipPropertyExistenceConstraint>>     | Creates an existence constraint on a relationship property.  | Y | Y
| <<query-plan-delete, Delete>>                                          | Deletes a node or relationship.  | | Y
| <<query-plan-detach-delete, DetachDelete>>               | Used when executing a query containing `DETACH DELETE` to delete nodes and their relationships.  | | Y
| <<query-plan-directed-relationship-by-id-seek, DirectedRelationshipByIdSeek>>  | Reads one or more relationships by id from the relationship store.  | Y |
| <<query-plan-distinct, Distinct>>                                          | Removes duplicate rows from the incoming stream of rows.  | |
| <<query-plan-drop-index, DropIndex>>              | Drops an index xx.  | Y | Y
| <<query-plan-drop-node-property-existence-constraint, DropNodePropertyExistenceConstraint>>     | Drops an existence constraint from a node property.  | Y | Y
| <<query-plan-drop-relationship-property-existence-constraint, DropRelationshipPropertyExistenceConstraint>>     | Drops an existence constraint from a relationship property.  | Y | Y
| <<query-plan-drop-unique-constraint, DropUniqueConstraint>>                  | Drops a unique constraint on a (label,property) pair.  | Y | Y
| <<query-plan-eager, Eager>>                                                | For isolation purposes, `Eager` ensures that operations affecting subsequent operations are executed fully for the whole dataset before continuing execution.  | |
| <<query-plan-eager-aggregation, EagerAggregation>>                         | Eagerly loads underlying results and stores it in a hash map, using the grouping keys as the keys for the map. | |
| <<query-plan-empty-result, EmptyResult>>                                   | Eagerly loads everything coming in to the EmptyResult operator and discards it. | |
| <<query-plan-empty-row, EmptyRow>>                                   | xxt. | Y |
| <<query-plan-expand-all, Expand(All) >>                                    | Given a start node, `Expand(All)` will follow incoming or outgoing relationships, depending on the pattern relationship. | |
| <<query-plan-expand-into, Expand(Into)>>                                   | When both the start and end node have already been found, `Expand(Into)` is used to find all connecting relationships between the two nodes. | |
| <<query-plan-filter, Filter>>                                              | Filters each row coming from the child operator, only passing through rows that evaluate the predicates to `true`. | |
| <<query-plan-foreach, Foreach>>                                              | xxx | |
| <<query-plan-let-anti-semi-apply, LetAntiSemiApply>>                       | Tests for the absence of a pattern predicate in queries containing multiple pattern predicates. | |
| <<query-plan-let-select-or-semi-apply, LetSelectOrSemiApply>>              | xxxx | |
| <<query-plan-let-select-or-anti-semi-apply, LetSelectOrAntiSemiApply>>     | xxx | |
| <<query-plan-let-semi-apply, LetSemiApply>>                                | Tests for the existence of a pattern predicate in queries containing multiple pattern predicates. | |
| <<query-plan-limit, Limit>>                                                | Returns the first 'n' rows from the incoming input. | |
| <<query-plan-load-csv, LoadCSV>>                                                  | Used when executing a query containing LOAD CSV. | Y |
| <<query-plan-lock, Lock>>                                                | Locks the start and end node when creating a relationship. | |
| <<query-plan-merge-into, Merge(Into)>>                                     | When both the start and end node have already been found, `Merge(Into)` is used to find all connecting relationships or creating a new relationship between the two nodes. | | Y
| <<query-plan-merge-create-node, MergeCreateNode>>            | xxxx. | Y | Y
| <<query-plan-merge-create-relationship, MergeCreateRelationship>>            | xxxx. | | Y
| <<query-plan-node-by-id-seek, NodeByIdSeek>>                               | Reads one or more nodes by id from the node store. | Y |
| <<query-plan-node-by-label-scan, NodeByLabelScan>>                         | Using the label index, fetches all nodes with a specific label on them from the node label index. | Y |
| <<query-plan-node-count-from-count-store, NodeCountFromCountStore>>        | Uses the count store to answer questions about node counts. | Y |
| <<query-plan-node-hash-join, NodeHashJoin>>                                | Using a hash table, a `NodeHashJoin` joins the input coming from the left with the input coming from the right. | |
| <<query-plan-node-index-contains-scan, NodeIndexContainsScan>>             | Goes through all values stored in an index, and searches for entries containing a specific string. | Y |
| <<query-plan-node-index-ends-with-scan, NodeIndexEndsWithScan>>        | Goes through all values stored in an index, and searches for entries ending in a specific string. | Y |
| <<query-plan-node-index-scan, NodeIndexScan>>                              | An index scan goes through all values stored in an index, and can be used to find all nodes with a particular label having a specified property. | Y |
| <<query-plan-node-index-seek, NodeIndexSeek>>                              | Finds nodes using an index seek. | Y |
| <<query-plan-node-index-seek-by-range, NodeIndexSeekByRange>>                 | Finds nodes using an index seek where the value of the property matches the given prefix string. | Y |
| <<query-plan-node-outer-hash-join, NodeOuterHashJoin>>      | xxx. | |
| <<query-plan-node-unique-index-seek, NodeUniqueIndexSeek>>                        | Finds nodes using an index seek within a unique index. | Y |
| <<query-plan-node-unique-index-seek-by-range, NodeUniqueIndexSeekByRange>>                 | Finds nodes using an index seek within a unique index where the value of the property matches the given prefix string. | Y |
| <<query-plan-optional, Optional>>                    | xxx. | |
| <<query-plan-optional-expand-all, OptionalExpand(All)>>                    | Traverses relationships from the given node, and ensures that predicates are evaluated before producing rows. | |
| <<query-plan-optional-expand-into, OptionalExpand(Into)>>                    | xx. | |
| <<query-plan-procedure-call, ProcedureCall>>                               | Calls a procedure. | |
| <<query-plan-produce-result, ProduceResult>>                                   | xx. | |
| <<query-plan-project-endpoints, ProjectEndpoints>>                         | For each incoming row, `ProjectEndpoints` evaluates xxx. | |
| <<query-plan-projection, Projection>>                                      | For each incoming row, `Projection` evaluates a set of expressions and produces a row with the results of the expressions. | Y |
| <<query-plan-relationship-count-from-count-store, RelationshipCountFromCountStore>>    | Uses the count store to answer questions about relationship counts. | Y |
| <<query-plan-remove-labels, RemoveLabels>>   | Used when deleting labels from a node. | | Y
| <<query-plan-roll-up-apply, RollUpApply>>      | xxx | |
| <<query-plan-select-or-anti-semi-apply, SelectOrAntiSemiApply>>            | Tests for the absence of a pattern predicate and evaluates a predicate. | |
| <<query-plan-select-or-semi-apply, SelectOrSemiApply>>                     | Tests for the existence of a pattern predicate and evaluates a predicate. | |
| <<query-plan-semi-apply, SemiApply>>                                       | Tests for the existence of a pattern predicate. | |
| <<query-plan-set-labels, SetLabels>>                            | Used when setting labels on a node. | | Y
| <<query-plan-set-node-property, SetNodeProperty>>          | Used when setting a property on a node. | | Y
| <<query-plan-set-node-property-from-map, SetNodePropertyFromMap>>          | Used when setting properties from a map on a node. | | Y
| <<query-plan-set-relationship-property, SetRelationshipProperty>>          | Used when setting a property on a relationship. | | Y
| <<query-plan-set-relationship-property-from-map, SetRelationshipPropertyFromMap>>    | Used when setting properties from a map on a relationship. | | Y
| <<query-plan-skip, Skip>>                                                  | Skips 'n' rows from the incoming rows. | |
| <<query-plan-sort, Sort>>                                                  | Sorts rows by a provided key. | |
| <<query-plan-top, Top>>                                                    | Returns the first 'n' rows sorted by a provided key. | |
| <<query-plan-triadic, Triadic>>                                            | Used to solve triangular queries, such as the very common 'find my friend-of-friends that are not already my friend'. | |
| <<query-plan-undirected-relationship-by-id-seek, UndirectedRelationshipByIdSeek>> | Reads one or more relationships by id from the relationship store. | Y |
| <<query-plan-union, Union>>                                                | Concatenates the results from the right plan after the results of the left plan. | |
| <<query-plan-unwind, Unwind>>                                              | Returns one row per item in a list. | |
| <<query-plan-update-graph, UpdateGraph>>                                   | Applies updates to the graph. | Y | Y
| <<query-plan-value-hash-join, ValueHashJoin>>                       | xxx. | |
| <<query-plan-varlength-expand-all, VarLengthExpand(All)>>                                   | xxx. | |
| <<query-plan-varlength-expand-into, VarLengthExpand(Into)>>                                   | xxx. | |
|===


Leaf operators, in general, locate the starting nodes and relationships required in order to execute the query.

Update operators are used in queries that update the graph.

include::execution-plan-groups/operators.asciidoc[leveloffset=+1]

include::execution-plan-groups/query-shortestpath-planning.adoc[leveloffset=+1]

