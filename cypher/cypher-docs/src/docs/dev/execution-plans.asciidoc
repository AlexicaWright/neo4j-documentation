[[execution-plans]]
= Execution plans

[abstract]
--
This section describes the operators used as part of a Cypher query's execution plan.
--

The task of executing a query is decomposed into _operators_, each of which implements a single unit of work.
The operators are combined into a structure called an _execution plan_.

Each operator is annotated with statistics.

`Rows`::
The number of rows that the operator produced. Only available if the query was profiled.
`EstimatedRows`::
If Neo4j used the cost-based compiler you will see the estimated number of rows that will be produced by the operator.
The compiler uses this estimate to choose a suitable execution plan.
`DbHits`::
Each operator will ask the Neo4j storage engine to do work such as retrieving or updating data.
A _database hit_ is an abstract unit of this storage engine work.
The actions triggering a database hit are listed <<execution-plans-dbhits, here>>.

See <<how-do-i-profile-a-query>> for how to view the execution plan for a query.

For a deeper understanding of how each operator works, refer the relevant section.
Please remember that the statistics of the actual database where the queries run on will decide the plan used.
There is no guarantee that a specific query will always be solved with the same plan.

* <<execution-plan-operators-summary, Execution plan operators>>
* <<query-shortestpath-planning, Shortest path planning>>

// The conditional leveloffsets below are "wrong" for the neo4j/neo4j
// Asciidoc+DB45 docs build, but AsciiDoc is limited to a certain depth so it
// is not possible to set them correctly. The downstream docs build is happy
// with these values.


[[execution-plan-operators-summary]]
== Execution plan operators at a glance

This table comprises all the execution plan operators ordered lexicographically.

* _Leaf_ operators, in most cases, locate the starting nodes and relationships required in order to execute the query.

* _Updating_ operators are used in queries that update the graph.

[options="header"]
|===
|Name                                                                       | Description | Leaf? | Updating?
| <<query-plan-all-nodes-scan, AllNodesScan>>                                | Reads all nodes from the node store. | Y |
| <<query-plan-anti-conditional-apply, AntiConditionalApply>>                | Performs a nested loop. If a variable is `null`, the right-hand side will be executed. | |
| <<query-plan-anti-semi-apply, AntiSemiApply>>                              | Performs a nested loop. Tests for the absence of a pattern predicate. | |
| <<query-plan-apply, Apply>>                                                | Performs a nested loop. Yields rows from both the left-hand and right-hand side operators.  | |
| <<query-plan-argument, Argument>>                                | Indicates the variable to be used as an argument to the right-hand side of an `Apply` operator.  | Y |
| <<query-plan-assert-same-node, AssertSameNode>>                            | Used to ensure that no unique constraints are violated.  | |
| <<query-plan-cartesian-product, CartesianProduct>>                 | Produces a cartesian product of the inputs from the left-hand and right-hand operators.  | |
| <<query-plan-conditional-apply, ConditionalApply>>                         | Performs a nested loop. If a variable is not `null`, the right-hand side will be executed.  | |
| <<query-plan-create-index, CreateIndex>>              | Creates an index on a property for all nodes having a certain label.  | Y | Y
| <<query-plan-create-node, CreateNode>>              | Creates a node.  | Y | Y
| <<query-plan-create-node-property-existence-constraint, CreateNodePropertyExistenceConstraint>>     |  Creates an existence constraint on a property for all nodes having a certain label.  | Y | Y
| <<query-plan-create-relationship, CreateRelationship>>              | Creates a relationship.  | | Y
| <<query-plan-create-relationship-property-existence-constraint, CreateRelationshipPropertyExistenceConstraint>>     | Creates an existence constraint on a property for all relationships of a certain type.  | Y | Y
| <<query-plan-create-unique-constraint, CreateUniqueConstraint>>                  | Creates a unique constraint on a property for all nodes having a certain label.  | Y | Y
| <<query-plan-delete, Delete>>                                          | Deletes a node or relationship.  | | Y
| <<query-plan-detach-delete, DetachDelete>>               | Deletes a node and its relationships.  | | Y
| <<query-plan-directed-relationship-by-id-seek, DirectedRelationshipByIdSeek>>  | Reads one or more relationships by id from the relationship store.  | Y |
| <<query-plan-distinct, Distinct>>                                          | Drops duplicate rows from the incoming stream of rows.  | |
| <<query-plan-drop-index, DropIndex>>              | Drops an index from a property for all nodes having a certain label.  | Y | Y
| <<query-plan-drop-node-property-existence-constraint, DropNodePropertyExistenceConstraint>>     | Drops an existence constraint from a property for all nodes having a certain label.  | Y | Y
| <<query-plan-drop-relationship-property-existence-constraint, DropRelationshipPropertyExistenceConstraint>>     | Drops an existence constraint from a property for all relationships of a certain type.  | Y | Y
| <<query-plan-drop-unique-constraint, DropUniqueConstraint>>                  | Drops a unique constraint from a property for all nodes having a certain label.  | Y | Y
| <<query-plan-eager, Eager>>                                                | For isolation purposes, `Eager` ensures that operations affecting subsequent operations are executed fully for the whole dataset before continuing execution.  | |
| <<query-plan-eager-aggregation, EagerAggregation>>                         | Evaluates a grouping expression. | |
| <<query-plan-empty-result, EmptyResult>>                                   | Eagerly loads all incoming data and discards it. | |
| <<query-plan-empty-row, EmptyRow>>                                   | Returns a single row with no columns. | Y |
| <<query-plan-expand-all, Expand(All) >>                                    | Traverses incoming or outgoing relationships from a given node. | |
| <<query-plan-expand-into, Expand(Into)>>                                   | Finds all relationships between two nodes. | |
| <<query-plan-filter, Filter>>                                              | Filters each row coming from the child operator, only passing through rows that evaluate the predicates to `true`. | |
| <<query-plan-foreach, Foreach>>                                              | Performs a nested loop. Yields rows from the left-hand operator and discards rows from the right-hand operator. | |
| <<query-plan-let-anti-semi-apply, LetAntiSemiApply>>                       | Performs a nested loop. Tests for the absence of a pattern predicate in queries containing multiple pattern predicates. | |
| <<query-plan-let-select-or-semi-apply, LetSelectOrSemiApply>>              | Performs a nested loop. Tests for the presence of a pattern predicate that is combined with other predicates. | |
| <<query-plan-let-select-or-anti-semi-apply, LetSelectOrAntiSemiApply>>     | Performs a nested loop. Tests for the absence of a pattern predicate that is combined with other predicates. | |
| <<query-plan-let-semi-apply, LetSemiApply>>                                | Performs a nested loop. Tests for the presence of a pattern predicate in queries containing multiple pattern predicates. | |
| <<query-plan-limit, Limit>>                                                | Returns the first 'n' rows from the incoming input. | |
| <<query-plan-load-csv, LoadCSV>>                                                  | Loads data from a CSV source into the query. | Y |
| <<query-plan-lock-nodes, LockNodes>>                                                | Locks the start and end node when creating a relationship. | |
| <<query-plan-merge-create-node, MergeCreateNode>>            | Creates the node when failing to find the node. | Y | Y
| <<query-plan-merge-create-relationship, MergeCreateRelationship>>            | Creates the relationship when failing to find the relationship. | | Y
| <<query-plan-node-by-id-seek, NodeByIdSeek>>                               | Reads one or more nodes by id from the node store. | Y |
| <<query-plan-node-by-label-scan, NodeByLabelScan>>                         | Fetches all nodes with a specific label from the node label index. | Y |
| <<query-plan-node-count-from-count-store, NodeCountFromCountStore>>        | Uses the count store to answer questions about node counts. | Y |
| <<query-plan-node-hash-join, NodeHashJoin>>                                | Executes a hash join on node ids. | |
| <<query-plan-node-index-contains-scan, NodeIndexContainsScan>>             | Examines all values stored in an index, searching for entries containing a specific string. | Y |
| <<query-plan-node-index-ends-with-scan, NodeIndexEndsWithScan>>        | Examines all values stored in an index, searching for entries ending in a specific string. | Y |
| <<query-plan-node-index-scan, NodeIndexScan>>                              | Examines all values stored in an index, returning all nodes with a particular label having a specified property. | Y |
| <<query-plan-node-index-seek, NodeIndexSeek>>                              | Finds nodes using an index seek. | Y |
| <<query-plan-node-index-seek-by-range, NodeIndexSeekByRange>>                 | Finds nodes using an index seek where the value of the property matches the given prefix string. | Y |
//| <<query-plan-node-outer-hash-join, NodeOuterHashJoin>>      | xxx. | |
| <<query-plan-node-unique-index-seek, NodeUniqueIndexSeek>>                        | Finds nodes using an index seek within a unique index. | Y |
| <<query-plan-node-unique-index-seek-by-range, NodeUniqueIndexSeekByRange>>                 | Finds nodes using an index seek within a unique index where the value of the property matches the given prefix string. | Y |
| <<query-plan-optional, Optional>>                    | Yields a single row with all columns set to `null` if no data is returned by its source. | |
| <<query-plan-optional-expand-all, OptionalExpand(All)>>                    | Traverses relationships from a given node, producing a single row with the relationship and end node set to `null` if the predicates are not fulfilled. | |
| <<query-plan-optional-expand-into, OptionalExpand(Into)>>                    | Traverses all relationships between two nodes, producing a single row with the relationship and end node set to `null` if no matching relationships are found (the start node will be the node with the smallest degree). | |
| <<query-plan-procedure-call, ProcedureCall>>                               | Calls a procedure. | |
| <<query-plan-produce-results, ProduceResults>>                                   | Prepares the result so that it is consumable by the user. | |
| <<query-plan-project-endpoints, ProjectEndpoints>>                         | Projects the start and end node of a relationship. | |
| <<query-plan-projection, Projection>>                                      | Evaluates a set of expressions, producing a row with the results thereof. | Y |
| <<query-plan-relationship-count-from-count-store, RelationshipCountFromCountStore>>    | Uses the count store to answer questions about relationship counts. | Y |
| <<query-plan-remove-labels, RemoveLabels>>   | Deletes labels from a node. | | Y
| <<query-plan-roll-up-apply, RollUpApply>>      | Performs a nested loop. Executes a pattern expression or pattern comprehension. | |
| <<query-plan-select-or-anti-semi-apply, SelectOrAntiSemiApply>>            | Performs a nested loop. Tests for the absence of a pattern predicate if an expression predicate evaluates to `false`. | |
| <<query-plan-select-or-semi-apply, SelectOrSemiApply>>                     | Performs a nested loop. Tests for the presence of a pattern predicate if an expression predicate evaluates to `false`. | |
| <<query-plan-semi-apply, SemiApply>>                                       | Performs a nested loop. Tests for the presence of a pattern predicate. | |
| <<query-plan-set-labels, SetLabels>>                            | Sets labels on a node. | | Y
| <<query-plan-set-node-property-from-map, SetNodePropertyFromMap>>          | Sets properties from a map on a node. | | Y
| <<query-plan-set-property, SetProperty>>          | Sets a property on a node or relationship. | | Y
| <<query-plan-set-relationship-property-from-map, SetRelationshipPropertyFromMap>>    | Sets properties from a map on a relationship. | | Y
| <<query-plan-skip, Skip>>                                                  | Skips 'n' rows from the incoming rows. | |
| <<query-plan-sort, Sort>>                                                  | Sorts rows by a provided key. | |
| <<query-plan-top, Top>>                                                    | Returns the first 'n' rows sorted by a provided key. | |
| <<query-plan-triadic-selection, TriadicSelection>>                                            | Solves triangular queries, such as the very common 'find my friend-of-friends that are not already my friend'. | |
| <<query-plan-undirected-relationship-by-id-seek, UndirectedRelationshipByIdSeek>> | Reads one or more relationships by id from the relationship store. | Y |
| <<query-plan-union, Union>>                                                | Concatenates the results from the right-hand operator with the results from the left-hand operator. | |
| <<query-plan-unwind, Unwind>>                                              | Returns one row per item in a list. | |
| <<query-plan-value-hash-join, ValueHashJoin>>                       | Executes a hash join on arbitrary values. | |
| <<query-plan-varlength-expand-all, VarLengthExpand(All)>>                                   | Traverses variable-length relationships from a given node. | |
| <<query-plan-varlength-expand-into, VarLengthExpand(Into)>>                                   | Finds all variable-length relationships between two nodes. | |
| <<query-plan-varlength-expand-full-pruning, VarLengthExpand(FullPruning)>>                                   | Traverses variable-length relationships from a given node and only returns unique end nodes. | |
| <<query-plan-varlength-expand-pruning, VarLengthExpand(Pruning)>>                                   | Traverses variable-length relationships from a given node and minimizes the number of duplicate end nodes returned. | |
|===


[[execution-plans-dbhits]]
== DbHits (Database hits)

Each operator will send a request to the storage engine to do work such as retrieving or updating data.
A _database hit_ is an abstract unit of this storage engine work.

We list below all the actions that trigger a database hit:

* Create actions
** Create a node
** Create a relationship
** Create a new node label
** Create a new relationship type
** Create a new ID for property keys with the same name

* Delete actions
** Delete a node
** Delete a relationship

* Update actions
** Set one or more labels on a node
** Remove one or more labels from a node

* Node-specific actions
** Get a node by its ID
** Get the degree of a node
** Determine whether a node is dense
** Determine whether a label is set on a node
** Get the labels of a node
** Get a property of a node
** Get an existing node label
** Get the name of a label by its ID, or its ID by its name

* Relationship-specific actions
** Get a relationship by its ID
** Get a property of a relationship
** Get an existing relationship type
** Get a relationship type name by its ID, or its ID by its name


* General actions
** Get the name of a property key by its ID, or its ID by the key name
** Find a node or relationship through an index seek or index scan
** Find a path in a variable-length expand
** Find a shortest path
** Ask the count store for a value


* Schema actions
** Add an index
** Drop an index
** Get the reference of an index
** Create a constraint
** Drop a constraint

* Call a procedure
* Call a user-defined function


include::execution-plan-groups/operators.asciidoc[leveloffset=+1]

include::execution-plan-groups/query-shortestpath-planning.adoc[leveloffset=+1]
