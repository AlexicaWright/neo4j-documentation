[[execution-plans]]
= Execution plans

[abstract]
--
This section describes operators used as part of an execution plan to execute a query in the Cypher query language.
--

Neo4j breaks down the work of executing a query into small pieces called operators.
Each operator is responsible for a small part of the overall query.
The operators are connected together in a pattern called a execution plan.

Each operator is annotated with statistics.

`Rows`::
The number of rows that the operator produced. Only available if the query was profiled.
`EstimatedRows`::
If Neo4j used the cost-based compiler you will see the estimated number of rows that will be produced by the operator.
The compiler uses this estimate to choose a suitable execution plan.
`DbHits`::
Each operator will ask the Neo4j storage engine to do work such as retrieving or updating data.
A _database hit_ is an abstract unit of this storage engine work.

See <<how-do-i-profile-a-query>> for how to view the execution plan for your query.

For a deeper understanding of how each operator works, see the relevant section.
Operators are grouped into high-level categories.
Please remember that the statistics of the actual database where the queries run on will decide the plan used.
There is no guarantee that a specific query will always be solved with the same plan.

* <<execution-plan-operators-summary, Execution plan operators at a glance>>
* <<execution-plans-starting-operators, Starting point operators>>
* <<execution-plans-expand-operators, Expand operators>>
* <<combining-operators, Combining operators>>
* <<execution-plans-row-operators, Row operators>>
* <<execution-plans-update-operators, Update operators>>
* <<query-shortestpath-planning, Shortest path planning>>

// The conditional leveloffsets below are "wrong" for the neo4j/neo4j
// Asciidoc+DB45 docs build, but AsciiDoc is limited to a certain depth so it
// is not possible to set them correctly. The downstream docs build is happy
// with these values.


[[execution-plan-operators-summary]]
**Execution plan operators at a glance**

This table comprises all the execution plan operators ordered lexicographically.

[options="header"]
|===
|Name                                                                       | Operator type          | Description
| <<query-plan-all-nodes-scan, AllNodesScan>>                                | Starting point | Reads all nodes from the node store.
| <<query-plan-anti-conditional-apply, AntiConditionalApply>>                | Combining | Checks whether a variable is `null`, and if so the right-hand side will be executed.
| <<query-plan-anti-semi-apply, AntiSemiApply>>                              | Combining | Tests for the existence of a pattern predicate.
| <<query-plan-apply, Apply>>                                                | Combining | `Apply` works by performing a nested loop.
| <<query-plan-assert-same-node, AssertSameNode>>                            | Combining | This operator is used to ensure that no uniqueness constraints are violated.
| <<query-plan-conditional-apply, ConditionalApply>>                         | Combining | Checks whether a variable is not `null`, and if so the right-hand side will be executed.
| <<query-plan-constraint-operation, Constraint operation>>                  | Update | Creates a constraint on a (label,property) pair.
| <<query-plan-directed-relationship-by-id-seek, DirectedRelationshipByIdSeek>>  | Starting point | Reads one or more relationships by id from the relationship store.
| <<query-plan-distinct, Distinct>>                                          | Row | Removes duplicate rows from the incoming stream of rows.
| <<query-plan-eager, Eager>>                                                | Row | For isolation purposes, `Eager` ensures that operations affecting subsequent operations are executed fully for the whole dataset before continuing execution.
| <<query-plan-eager-aggregation, EagerAggregation>>                         | Row | Eagerly loads underlying results and stores it in a hash map, using the grouping keys as the keys for the map.
| <<query-plan-empty-result, EmptyResult>>                                   | Update | Eagerly loads everything coming in to the EmptyResult operator and discards it.
| <<query-plan-expand-all, Expand(All) >>                                    | Expand | Given a start node, `Expand(All)` will follow incoming or outgoing relationships, depending on the pattern relationship.
| <<query-plan-expand-into, Expand(Into)>>                                   | Expand | When both the start and end node have already been found, `Expand(Into)` is used to find all connecting relationships between the two nodes.
| <<query-plan-filter, Filter>>                                              | Row | Filters each row coming from the child operator, only passing through rows that evaluate the predicates to `true`.
| <<query-plan-let-anti-semi-apply, LetAntiSemiApply>>                       | Combining | Tests for the absence of a pattern predicate in queries containing multiple pattern predicates.
| <<query-plan-let-semi-apply, LetSemiApply>>                                | Combining | Tests for the existence of a pattern predicate in queries containing multiple pattern predicates.
| <<query-plan-limit, Limit>>                                                | Row | Returns the first 'n' rows from the incoming input.
| <<query-plan-lock, Lock>>                                                | Row | Locks the start and end node when creating a relationship.
| <<query-plan-merge-into, Merge(Into)>>                                     | Update | When both the start and end node have already been found, `Merge(Into)` is used to find all connecting relationships or creating a new relationship between the two nodes.
| <<query-plan-node-by-id-seek, NodeByIdSeek>>                               | Starting point | Reads one or more nodes by id from the node store.
| <<query-plan-node-by-label-scan, NodeByLabelScan>>                         | Starting point | Using the label index, fetches all nodes with a specific label on them from the node label index.
| <<query-plan-node-count-from-count-store, NodeCountFromCountStore>>        | Row | Uses the count store to answer questions about node counts.
| <<query-plan-node-hash-join, NodeHashJoin>>                                | Combining | Using a hash table, a `NodeHashJoin` joins the input coming from the left with the input coming from the right.
| <<query-plan-node-index-contains-scan, NodeIndexContainsScan>>             | Starting point | An index contains scan goes through all values stored in an index, and searches for entries containing a specific string.
| <<query-plan-node-index-scan, NodeIndexScan>>                              | Starting point | An index scan goes through all values stored in an index, and can be used to find all nodes with a particular label having a specified property.
| <<query-plan-node-index-seek, NodeIndexSeek>>                              | Starting point | Finds nodes using an index seek.
| <<query-plan-node-index-range-seek, NodeIndexSeekByRange>>                 | Starting point | Finds nodes using an index seek where the value of the property matches the given prefix string.
| <<query-plan-node-index-seek, NodeUniqueIndexSeek>>                        | Starting point | Finds nodes using an index seek within a unique index.
| <<query-plan-optional-expand-all, OptionalExpand(All)>>                    | Expand | Traverses relationships from the given node, and ensures that predicates are evaluated before producing rows.
| <<query-plan-optional, Optional>>                    | Row | xxx.
| <<query-plan-call-procedure, ProcedureCall>>                               | Row | Calls a procedure.
| <<query-plan-project-endpoints, ProjectEndpoints>>                         | Row | For each incoming row, `ProjectEndpoints` evaluates xxx.
| <<query-plan-projection, Projection>>                                      | Row | For each incoming row, `Projection` evaluates a set of expressions and produces a row with the results of the expressions.
| <<query-plan-relationship-count-from-count-store, RelationshipCountFromCountStore>>    | Row | Uses the count store to answer questions about relationship counts.
| <<query-plan-select-or-anti-semi-apply, SelectOrAntiSemiApply>>            | Combining | Tests for the absence of a pattern predicate and evaluates a predicate.
| <<query-plan-select-or-semi-apply, SelectOrSemiApply>>                     | Combining | Tests for the existence of a pattern predicate and evaluates a predicate.
| <<query-plan-semi-apply, SemiApply>>                                       | Combining | Tests for the existence of a pattern predicate.
| <<query-plan-skip, Skip>>                                                  | Row | Skips 'n' rows from the incoming rows.
| <<query-plan-sort, Sort>>                                                  | Row | Sorts rows by a provided key.
| <<query-plan-top, Top>>                                                    | Row | Returns the first 'n' rows sorted by a provided key.
| <<query-plan-triadic, Triadic>>                                            | Combining | `Triadic` is used to solve triangular queries, such as the very common 'find my friend-of-friends that are not already my friend'.
| <<query-plan-undirected-relationship-by-id-seek, UndirectedRelationshipByIdSeek>> | Starting point | Reads one or more relationships by id from the relationship store.
| <<query-plan-union, Union>>                                                | Row | Concatenates the results from the right plan after the results of the left plan.
| <<query-plan-unwind, Unwind>>                                              | Row | Returns one row per item in a list.
| <<query-plan-update-graph, UpdateGraph>>                                   | Update | Applies updates to the graph.
|===


include::execution-plan-groups/starting-query.asciidoc[leveloffset=+1]

include::execution-plan-groups/expand.asciidoc[leveloffset=+1]

include::execution-plan-groups/combining-operators.adoc[leveloffset=+1]

include::execution-plan-groups/row.asciidoc[leveloffset=+1]

include::execution-plan-groups/update.asciidoc[leveloffset=+1]

include::execution-plan-groups/query-shortestpath-planning.adoc[leveloffset=+1]

