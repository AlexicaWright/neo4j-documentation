[[query-operators]]
= Operators

* <<query-operators-summary,Operators at a glance>>
* <<query-operators-general,General operators>>
 ** <<syntax-using-the-distinct-operator,Using the `DISTINCT` operator>>
 ** <<syntax-accessing-the-property-of-a-nested-literal-map,Accessing the property of a nested literal map>>
 ** <<syntax-filtering-on-a-dynamically-computed-property-key,Filtering on a dynamically-computed property key>>
* <<query-operators-mathematical,Mathematical operators>>
 ** <<syntax-using-the-exponentiation-operator,Using the exponentiation operator>>
 ** <<syntax-using-the-unary-minus-operator,Using the unary minus operator>>
* <<query-operators-comparison,Comparison operators>>
 ** <<syntax-comparing-two-numbers,Comparing two numbers>>
 ** <<syntax-using-starts-with-to-filter-names,Using `STARTS WITH` to filter names>>
* <<query-operators-boolean,Boolean operators>>
 ** <<syntax-using-boolean-operators-to-filter-numbers,Using boolean operators to filter numbers>>
* <<query-operators-string,String operators>>
 ** <<syntax-using-a-regular-expression-to-filter-words,Using a regular expression to filter words>>
* <<query-operators-list,List operators>>
 ** <<syntax-concatenating-two-lists,Concatenating two lists>>
 ** <<syntax-using-in-to-check-if-a-number-is-in-a-list,Using `IN` to check if a number is in a list>>
 ** <<syntax-accessing-elements-in-a-list,Accessing elements in a list>>
* <<query-operators-property,Property operators>>
* <<cypher-comparison,Equality and comparison of values>>
* <<cypher-ordering,Ordering and comparison of values>>
* <<cypher-operations-chaining,Chaining comparison operations>>


[[query-operators-summary]]
== Operators at a glance

|===
| <<query-operators-general,General operators>> | `DISTINCT`, `.` for property access, `[]` for dynamic property access
| <<query-operators-mathematical,Mathematical operators>> | `+`, `-`, `*`, `/`, `%`, `^`
| <<query-operators-comparison,Comparison operators>>     | `=`, `<>`, `<`, `>`, `<=`, `>=`, `IS NULL`, `IS NOT NULL`
| <<query-operators-comparison,String-specific comparison operators>> | `STARTS WITH`, `ENDS WITH`, `CONTAINS`
| <<query-operators-boolean,Boolean operators>> | `AND`, `OR`, `XOR`, `NOT`
| <<query-operators-string,String operators>>   | `+` for concatenation, `=~` for regex matching
| <<query-operators-list,List operators>>       | `+` for concatenation, `IN` to check existence of an element in a list, `[]` for accessing element(s)
|===

include::../ql/syntax/operators.asciidoc[leveloffset=+1]


[[query-operators-property]]
== Property operators

[NOTE]
Since version 2.0, the previously supported property operators `?` and `!` have been removed.
This syntax is no longer supported.
Missing properties are now returned as `null`.
Please use `(NOT(has(<ident>.prop)) OR <ident>.prop=<value>)` if you really need the old behavior of the `?` operator.
-- Also, the use of `?` for optional relationships has been removed in favor of the newly-introduced `OPTIONAL MATCH` clause.

