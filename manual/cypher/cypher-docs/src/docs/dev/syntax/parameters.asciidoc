[[cypher-parameters]]
= Parameters

Cypher supports querying with parameters.
This means developers don't have to resort to string building to create a query.
Additionally, parameters make caching of execution plans much easier for Cypher, thus leading to faster query execution times.

Parameters can be used for:

* literals and expressions
* node and relationship ids
* for legacy indexes only: index values and queries

Parameters cannot be used for the following constructs, as these form part of the query structure that is compiled into a query plan:

* property keys; so, `MATCH (n) WHERE n.{param} = 'something'` is invalid
* relationship types
* labels

Parameters may consist of letters and numbers, and any combination of these, but cannot start with a number or a currency symbol.

For details on using parameters via the Neo4j REST API, see <<rest-api-transactional>>.

We provide below a comprehensive list of examples of parameter usage.
In these examples, parameters are given in JSON; the exact manner in which they are to be submitted depends upon the driver being used.

[NOTE]
====
We introduce in this release the new parameter syntax `$param`, and note that the current syntax `{param}` will be deprecated in a later release.
====

== String literal

include::includes/exampleWithStringLiteralAsParameter.asciidoc[]

You can use parameters in this syntax as well:

include::includes/exampleWithShortSyntaxStringLiteralAsParameter.asciidoc[]

== Regular expression

include::includes/exampleWithParameterRegularExpression.asciidoc[]


== Case-sensitive string pattern matching

include::includes/exampleWithParameterCSCIStringPatternMatching.asciidoc[]


== Create node with properties

include::includes/create_node_from_map.asciidoc[]

== Create multiple nodes with properties

include::includes/create_multiple_nodes_from_map.asciidoc[]

== Setting all properties on a node

Note that this will replace all the current properties.

include::includes/set_properties_on_a_node_from_a_map.asciidoc[]

== SKIP and LIMIT

include::includes/exampleWithParameterForSkipLimit.asciidoc[]

== Node id

include::includes/exampleWithParameterForNodeId.asciidoc[]

== Multiple node ids

include::includes/exampleWithParameterForMultipleNodeIds.asciidoc[]

== Index value (legacy indexes)

include::includes/exampleWithParameterForIndexValue.asciidoc[]

== Index query (legacy indexes)

include::includes/exampleWithParametersForQuery.asciidoc[]
